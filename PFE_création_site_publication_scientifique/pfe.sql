-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Hôte : 127.0.0.1
-- Généré le :  ven. 17 avr. 2020 à 00:50
-- Version du serveur :  10.1.38-MariaDB
-- Version de PHP :  7.3.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données :  `pfe`
--
drop database if exists pfe;
create database pfe;
use pfe;
-- --------------------------------------------------------

--
-- Structure de la table `article`
--

CREATE TABLE `article` (
  `article_id` int(11) NOT NULL,
  `author_id` int(11) NOT NULL,
  `title` varchar(200) NOT NULL,
  `domain` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `state` varchar(2) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `article`
--

INSERT INTO `article` (`article_id`, `author_id`, `title`, `domain`, `content`, `state`, `created_at`) VALUES
(45, 35, 'Corona Virus - Covid-19', 'Computing', 'Now we also face an immediate crisis. In the past week, Covid-19 has started behaving a lot like the once-in-a-century pathogen we’ve been worried about. I hope it’s not that bad, but we should assume it will be until we know otherwise.\r\n\r\nThere are two reasons that Covid-19 is such a threat. First, it can kill healthy adults in addition to elderly people with existing health problems. The data so far suggest that the virus has a case fatality risk around 1%; this rate would make it many times more severe than typical seasonal influenza, putting it somewhere between the 1957 influenza pandemic (0.6%) and the 1918 influenza pandemic (2%).2\r\n\r\nSecond, Covid-19 is transmitted quite efficiently. The average infected person spreads the disease to two or three others — an exponential rate of increase. There is also strong evidence that it can be transmitted by people who are just mildly ill or even presymptomatic.3 That means Covid-19 will be much harder to contain than the Middle East respiratory syndrome or severe acute respiratory syndrome (SARS), which were spread much less efficiently and only by symptomatic people. In fact, Covid-19 has already caused 10 times as many cases as SARS in a quarter of the time.', 'AJ', '2020-03-20 02:48:58'),
(46, 35, 'Demands for Transparency - Corrected 2', 'Divers', 'Demands for transparency are central to the current culture of public debate. Climate scientists and their associations, the former English football captain, individual politicians and political parties, arts organisations, BBC broadcasters, financial institutions, and local government have all been criticised in the past few days for not being transparent enough. The right of the public to question the decisions of those with power and demand disclosure of information from those in authority is essential for democracy, but transparency has become a double-edged sword, smudging all kinds of cultural distinction between the powerful and ordinary person. This has led to demands for transparency of that entity we used to call the private citizen. These demands can only control the behaviour of the citizen in general and stifle the creativity that relies on cultural exchanges between people.\r\n\r\nThat transparency would threaten the privacy of the individual at first seems obvious, because wanting to know something requires the disclosure of something that someone else may prefer to remain hidden. We have always had to balance the public interest with that of the privacy of the individual, depending upon the issue. But when those in authority take up the cry for more transparency, rather than those who seek to bring authority to account, the result is less likely to be the democratic investigation of powerful interests and more likely the undemocratic control of the individual.\r\n\r\nTransparency is less of a threat to privacy in the sense that more information about an individual may be gathered or demanded. It is a greater threat to privacy in the sense that the actions we take and the autonomous decisions we all make in whatever capacity become subject to a panoptical scrutiny with the retrospective ability to censure or punish. This has the potential to restrict action and narrow the basis upon which we act.', 'R', '2020-03-20 03:13:30'),
(57, 35, 'Article Programmatique', 'Computing', 'Comme beaucoup de monde, vous avez entendu parler de la publicité programmatique, vous savez qu’il faut en faire, que c’est un marché qui représente plus de 8 milliards d’euros en Europe, dont 639 millions pour la France seulement, et plus de 53 % du marché display ! Vous avez une vague idée de ce que c’est, mais vous n’êtes pas sûr(e) d’avoir tout compris, ni comment l’utiliser ? Rassurez-vous, la suite de cet article a pour but de vous aider en vous expliquant le plus simplement possible ce qu’est la publicité programmatique, comment elle fonctionne, et surtout quelle est sa valeur ajoutée…\r\n\r\nLa bonne nouvelle, c’est que le concept n’est pas tout à fait nouveau dans la mesure où ce mode d’achat est né en 2000 avec l’apparition des ad networks et de Google Adwords. Lorsque vous configurez une campagne Adwords, vous ne faites rien d’autre que de l’achat de mots-clés en temps réel en fonction des enchères (beaucoup me reprocheront ce raccourci, mais il est purement didactique).', 'R', '2020-03-22 01:55:11'),
(58, 38, 'PHP', 'Computing', 'TEST TEST EHFJZHUEHUSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS', 'R', '2020-03-24 20:06:36'),
(59, 38, 'Intelligence artificielle', 'Computing', 'L\'intelligence artificielle (IA, ou AI en anglais pour Artificial Intelligence) consiste à mettre en œuvre un certain nombre de techniques visant à permettre aux machines d\'imiter une forme d\'intelligence réelle. L\'IA se retrouve implémentée dans un nombre grandissant de domaines d\'application.\r\n\r\nLa notion voit le jour dans les années 1950 grâce au mathématicien Alan Turing. Dans son livre Computing Machinery and Intelligence, ce dernier soulève la question d\'apporter aux machines une forme d\'intelligence. Il décrit alors un test aujourd\'hui connu sous le nom « Test de Turing » dans lequel un sujet interagit à l\'aveugle avec un autre humain, puis avec une machine programmée pour formuler des réponses sensées. Si le sujet n\'est pas capable de faire la différence, alors la machine a réussi le test et, selon l\'auteur, peut véritablement être considérée comme « intelligente ».\r\n\r\nDe Google à Microsoft en passant par Apple, IBM ou Facebook, toutes les grandes entreprises dans le monde de l\'informatique planchent aujourd\'hui sur les problématiques de l\'intelligence artificielle en tentant de l\'appliquer à quelques domaines précis. Chacun a ainsi mis en place des réseaux de neurones artificiels constitués de serveurs et permettant de traiter de lourds calculs au sein de gigantesques bases de données.', 'AJ', '2020-03-30 01:07:17'),
(60, 38, 'Optimisation linéaire', 'Mathematics', 'En optimisation mathématique, un problème d\'optimisation linéaire demande de minimiser une fonction linéaire sur un polyèdre convexe. La fonction que l\'on minimise ainsi que les contraintes sont décrites par des fonctions linéaires1, d\'où le nom donné à ces problèmes. L’optimisation linéaire (OL) est la discipline qui étudie ces problèmes. Elle est également désignée par le nom de programmation linéaire, terme introduit par George Dantzig vers 19472, mais cette appellation tend à être abandonnée3 à cause de la confusion possible avec la notion de programmation informatique.\r\n\r\nPar exemple, le problème à deux variables x = ( x 1 , x 2 ) ∈ R 2 {\\displaystyle x=(x_{1},x_{2})\\in \\mathbb {R} ^{2}} x=(x_{1},x_{2})\\in \\mathbb {R} ^{2} suivant\r\n{ inf x x 1 + x 2 x 1 + 2 x 2 ⩾ 2 , x 1 ⩾ 0 , x 2 ⩾ 0 , {\\displaystyle \\left\\{{\\begin{array}{l}{\\inf }_{x}\\;x_{1}+x_{2}\\\\x_{1}+2x_{2}\\geqslant 2,\\quad x_{1}\\geqslant 0,\\quad x_{2}\\geqslant 0,\\end{array}}\\right.} \\left\\{{\\begin{array}{l}{\\inf }_{x}\\;x_{1}+x_{2}\\\\x_{1}+2x_{2}\\geqslant 2,\\quad x_{1}\\geqslant 0,\\quad x_{2}\\geqslant 0,\\end{array}}\\right.\r\n\r\nqui consiste à minimiser la fonction linéaire x = ( x 1 , x 2 ) ∈ R 2 ↦ x 1 + x 2 ∈ R {\\displaystyle x=(x_{1},x_{2})\\in \\mathbb {R} ^{2}\\mapsto x_{1}+x_{2}\\in \\mathbb {R} } x=(x_{1},x_{2})\\in \\mathbb {R} ^{2}\\mapsto x_{1}+x_{2}\\in \\mathbb {R} sous la contrainte d\'inégalité affine x1 + 2x2 ≥ 2 et les contraintes de positivité des xi est un problème d\'optimisation linéaire. Sa solution est ici très simple à calculer ; elle vaut (x1 , x2) = (0,1). Dès que le nombre de variables et de contraintes augmente, le problème ne peut plus se résoudre par tâtonnement.\r\n\r\nPlus généralement, un problème d\'OL s\'écrira donc en notation matricielle de la manière suivante\r\n{ inf x c ⊤ x A x ⩽ b , {\\displaystyle \\left\\{{\\begin{array}{l}{\\inf }_{x}\\;c^{\\top }x\\\\Ax\\leqslant b,\\end{array}}\\right.} \\left\\{{\\begin{array}{l}{\\inf }_{x}\\;c^{\\top }x\\\\Ax\\leqslant b,\\end{array}}\\right.\r\n\r\noù x ∈ R n {\\displaystyle x\\in \\mathbb {R} ^{n}} x\\in \\mathbb {R} ^{n} est l\'inconnue, le vecteur des variables réelles x1,...,xn à optimiser, et les données sont des vecteurs c ∈ R n {\\displaystyle c\\in \\mathbb {R} ^{n}} c\\in \\mathbb {R} ^{n} et b ∈ R m {\\displaystyle b\\in \\mathbb {R} ^{m}} b\\in \\mathbb {R} ^{m} et une matrice A ∈ R m × n {\\displaystyle A\\in \\mathbb {R} ^{m\\times n}} A\\in \\mathbb {R} ^{m\\times n}. L\'inégalité vectorielle Ax ≤ b doit être entendue composante par composante : pour tout indice i, on doit avoir (Ax – b)i ≤ 0. L\'ensemble admissible { x ∈ R n : A x ⩽ b } {\\displaystyle \\{x\\in \\mathbb {R} ^{n}:Ax\\leqslant b\\}} \\{x\\in \\mathbb {R} ^{n}:Ax\\leqslant b\\} est donc bien un polyèdre convexe, puisqu\'il s\'agit de l\'intersection des demi-espaces { x ∈ R n : ( A x − b ) i ⩽ 0 } {\\displaystyle \\{x\\in \\mathbb {R} ^{n}:(Ax-b)_{i}\\leqslant 0\\}} \\{x\\in \\mathbb {R} ^{n}:(Ax-b)_{i}\\leqslant 0\\}, pour i = 1,...,m, en nombre fini. Bien sûr, comme toujours en optimisation, un problème de maximisation se ramènera à la formulation précédente en minimisant l\'opposé de la fonction-coût sur le même polyèdre convexe.\r\n\r\nParmi les problèmes d\'optimisation avec contraintes d\'inégalité, les problèmes linéaires sont simples à résoudre numériquement. On connait en effet des algorithmes polynomiaux efficaces, requérant donc un nombre d\'itérations qui est majoré par un polynôme, fonction des dimensions du problème. Typiquement, un algorithme de points intérieurs requerra théoriquement au plus de l\'ordre de O(√n) itérations pour une formulation du problème voisine de celle donnée ci-dessus.\r\n\r\nBeaucoup de problèmes de recherche opérationnelle peuvent être exprimés comme des problèmes d\'optimisation linéaire. Ces problèmes apparaissent aussi comme sous-produits dans des algorithmes conçus pour résoudre des problèmes plus difficiles.\r\n\r\nDans certains problèmes d\'OL, on requiert en plus que les variables ne prennent que des valeurs entières (contraintes dites d\'intégrité), voire que les valeurs 0 ou 1. On parle alors de problème d\'optimisation linéaire en nombres entiers. Ces derniers problèmes sont beaucoup plus difficiles à résoudre que les problèmes d\'OL à variables continues décrits ci-dessus. ', 'AJ', '2020-03-30 01:08:13'),
(61, 38, 'théorie einstein espace temps', 'Physics', 'Le continuum espace-temps comporte quatre dimensions : trois dimensions pour l\'espace, « x », « y », et « z », et une pour le temps, « t ». Afin de pouvoir les manipuler plus aisément, on s\'arrange pour que ces quatre grandeurs soient homogènes à une distance en multipliant « t » par la constante « c » (célérité de la lumière dans le vide).\r\n\r\nUn événement se positionne dans le temps et l\'espace par ses coordonnées « ct », « x », « y », « z », qui dépendent toutes du référentiel. Il est très difficile de s\'imaginer que le temps ne soit pas le même suivant le référentiel dans lequel on le mesure, mais c\'est bien le cas : il n\'est donc pas absolu ; il en va de même pour l\'espace : la longueur d\'un objet peut être différente selon le référentiel de mesure.\r\n\r\nDans l\'état actuel des connaissances, seul l\'espace-temps comme concept unifié, qui est mathématiquement un espace de Minkowski en relativité restreinte et un espace courbe quelconque en relativité générale, est invariant quel que soit le référentiel choisi, tandis que ses composantes d\'espace et temps en sont des aspects qui dépendent du point de vue (référentiel).\r\n\r\nLe rapport entre les mesures d\'espace et temps donné par la constante universelle c permet de décrire une distance d en matière de temps : d = ct avec t le temps nécessaire à la lumière pour parcourir d. Le Soleil est à environ 150 millions de kilomètres c\'est-à-dire à environ 8 minutes-lumière de la Terre. En disant « minutes-lumière », on parle d\'une mesure de temps multipliée par c, et on obtient une mesure de distance, dans ce cas-ci des kilomètres. Autrement dit, le facteur c sert à convertir des unités de temps en unités de distance. Kilomètres et minutes-lumière sont donc deux unités de mesure de distance.\r\n\r\nCe qui unifie espace et temps dans une même équation, c\'est que la mesure du temps peut être transformée en mesure de distance (en multipliant t, exprimé en unités de temps, par c), et t peut donc de ce fait être associé aux trois autres coordonnées de distance dans une équation où toutes les mesures sont en unités de distance. En ce sens, on pourrait dire que le temps, c\'est de l\'espace !\r\n\r\nCependant John Wheeler tient à rappeler que le temps et l\'espace ont de grandes différences de nature, ne sont pas complètement identifiables et ne se transforment que partiellement l\'un en l\'autre dans un changement de repère[réf. nécessaire].\r\nDimensions\r\n\r\nEn relativité restreinte, l\'espace-temps a quatre dimensions : trois d\'espace et une de temps1. Il en est de même en relativité générale. Mais, dans le cadre de théories spéculatives, l\'espace-temps peut avoir une ou des dimensions additionnelles1. La première théorie dont l\'espace-temps a plus de quatre dimensions est celle proposée en 1914 par Gunnar Nordström (1881-1923)2. L\'espace-temps est également pentadimensionnel dans la théorie de Kaluza-Klein proposée en 1919-1921 par Theodor Kaluza (1885-1954) puis revue en 1926 par Oskar Klein (1894-1977)2. L\'espace-temps a dix dimensions dans le cadre de théorie des cordes3 ; il en a onze dans celui de la théorie M proposée en 1995 par Edward Witten (1951-)3,4.\r\nPopularité de la notion d\'espace-temps\r\n\r\nLa notion d\'espace-temps intéresse grandement les philosophes, comme Prigogine, Stengers, Bergson, Kant5,6, etc.\r\n\r\nCe concept, ou du moins son nom, est souvent utilisé dans les dialogues et scénarios de romans ou films de science-fiction (exemple : Interstellar de Christopher Nolan), illustré par les notions de « vortex spatio-temporel », « univers parallèle », boucle spatio-temporelle, voyage dans le temps, etc.\r\n\r\nLe concept est également sujet d\'humour, d\'aventure ou d\'effroi, dans des bandes dessinées, imprimées ou en ligne, telles que xkcd7 de Randall Munroe ou Vortex de Stan et Vince ou Bob Morane et Les Tours de Cristal de Dino Attanasio et Henri Vernes8. Mais également dans des romans tels que La Patrouille du Temps de Poul Anderson ou « le Cycle du Temps » des aventures de Bob Morane de Henri Vernes9.\r\n\r\nContrairement à la notion d\'espace ou de temps, la notion d\'espace-temps a globalement du mal à s’ancrer en tant que réalité physique dans la culture générale et l’inconscient collectif. Le temps et l\'espace ont toujours tendance à être dissociés et le temps à être perçu uniquement comme un concept qui n\'a pas de réalité physique (contrairement à l\'espace). ', 'AJ', '2020-03-30 01:09:41'),
(62, 38, 'Black hole', 'Physics', 'A black hole is a region of spacetime exhibiting gravitational acceleration so strong that nothing—no particles or even electromagnetic radiation such as light—can escape from it.[6] The theory of general relativity predicts that a sufficiently compact mass can deform spacetime to form a black hole.[7][8] The boundary of the region from which no escape is possible is called the event horizon. Although the event horizon has an enormous effect on the fate and circumstances of an object crossing it, no locally detectable features appear to be observed.[9] In many ways, a black hole acts like an ideal black body, as it reflects no light.[10][11] Moreover, quantum field theory in curved spacetime predicts that event horizons emit Hawking radiation, with the same spectrum as a black body of a temperature inversely proportional to its mass. This temperature is on the order of billionths of a kelvin for black holes of stellar mass, making it essentially impossible to observe.\r\n\r\nObjects whose gravitational fields are too strong for light to escape were first considered in the 18th century by John Michell and Pierre-Simon Laplace.[12] The first modern solution of general relativity that would characterize a black hole was found by Karl Schwarzschild in 1916, although its interpretation as a region of space from which nothing can escape was first published by David Finkelstein in 1958. Black holes were long considered a mathematical curiosity; it was during the 1960s that theoretical work showed they were a generic prediction of general relativity. The discovery of neutron stars by Jocelyn Bell Burnell in 1967 sparked interest in gravitationally collapsed compact objects as a possible astrophysical reality.\r\n\r\nBlack holes of stellar mass are expected to form when very massive stars collapse at the end of their life cycle. After a black hole has formed, it can continue to grow by absorbing mass from its surroundings. By absorbing other stars and merging with other black holes, supermassive black holes of millions of solar masses (M☉) may form. There is consensus that supermassive black holes exist in the centers of most galaxies.\r\n\r\nThe presence of a black hole can be inferred through its interaction with other matter and with electromagnetic radiation such as visible light. Matter that falls onto a black hole can form an external accretion disk heated by friction, forming some of the brightest objects in the universe. Stars passing too close to a supermassive black hole can be shred into streamers that shine very brightly before being \"swallowed.\"[13] If there are other stars orbiting a black hole, their orbits can be used to determine the black hole\'s mass and location. Such observations can be used to exclude possible alternatives such as neutron stars. In this way, astronomers have identified numerous stellar black hole candidates in binary systems, and established that the radio source known as Sagittarius A*, at the core of the Milky Way galaxy, contains a supermassive black hole of about 4.3 million solar masses.\r\n\r\nOn 11 February 2016, the LIGO collaboration announced the first direct detection of gravitational waves, which also represented the first observation of a black hole merger.[14] As of December 2018, eleven gravitational wave events have been observed that originated from ten merging black holes (along with one binary neutron star merger).[15][16] On 10 April 2019, the first ever direct image of a black hole and its vicinity was published, following observations made by the Event Horizon Telescope in', 'AJ', '2020-03-30 01:42:04'),
(63, 38, 'SDL Game Development', 'Computing', 'SDL Game Development\r\nCopyright © 2013 Packt Publishing\r\nAll rights reserved. No part of this book may be reproduced, stored in a retrieval \r\nsystem, or transmitted in any form or by any means, without the prior written \r\npermission of the publisher, except in the case of brief quotations embedded in \r\ncritical articles or reviews.\r\nEvery effort has been made in the preparation of this book to ensure the accuracy \r\nof the information presented. However, the information contained in this book is \r\nsold without warranty, either express or implied. Neither the author, nor Packt \r\nPublishing, and its dealers and distributors will be held liable for any damages \r\ncaused or alleged to be caused directly or indirectly by this book.\r\nPackt Publishing has endeavored to provide trademark information about all of the \r\ncompanies and products mentioned in this book by the appropriate use of capitals. \r\nHowever, Packt Publishing cannot guarantee the accuracy of this information.\r\nFirst published: June 2013\r\nProduction Reference: 1170613\r\nPublished by Packt Publishing Ltd.\r\nLivery Place\r\n35 Livery Street\r\nBirmingham B3 2PB, UK.\r\nISBN 978-1-84969-682-1\r\nwww.packtpub.com\r\nCover Image by Shaun Mitchell (shaunmitchell84@googlemail.com)', 'AJ', '2020-03-30 01:44:32'),
(64, 38, 'Coronavirus pandemic leading to huge drop in air pollution', 'Divers', 'The coronavirus pandemic is shutting down industrial activity and temporarily slashing air pollution levels around the world, satellite imagery from the European Space Agency shows.\r\n\r\nOne expert said the sudden shift represented the “largest scale experiment ever” in terms of the reduction of industrial emissions.\r\n\r\nReadings from ESA’s Sentinel-5P satellite show that over the past six weeks, levels of nitrogen dioxide (NO2) over cities and industrial clusters in Asia and Europe were markedly lower than in the same period last year.\r\n\r\nNitrogen dioxide is produced from car engines, power plants and other industrial processes and is thought to exacerbate respiratory illnesses such as asthma.\r\nAdvertisement\r\n\r\nWhile not a greenhouse gas itself, the pollutant originates from the same activities and industrial sectors that are responsible for a large share of the world’s carbon emissions and that drive global heating.\r\n\r\nPaul Monks, professor of air pollution at the University of Leicester, predicted there will be important lessons to learn. “We are now, inadvertently, conducting the largest-scale experiment ever seen,” he said. “Are we looking at what we might see in the future if we can move to a low-carbon economy? Not to denigrate the loss of life, but this might give us some hope from something terrible. To see what can be achieved.”\r\n\r\nMonks, the former chair of the UK government’s science advisory committee on air quality, said that a reduction in air pollution could bring some health benefits, though they were unlikely to offset loss of life from the disease.\r\nSign up to the Green Light email to get the planet\'s most important stories\r\nRead more\r\n\r\n“It seems entirely probable that a reduction in air pollution will be beneficial to people in susceptible categories, for example some asthma sufferers,” he said. “It could reduce the spread of disease. A high level of air pollution exacerbates viral uptake because it inflames and lowers immunity.” Agriculture could also get a boost because pollution stunts plant growth, he added.\r\n\r\nThe World Health Organization describes NO2 as “a toxic gas which causes significant inflammation of the airways” at concentrations above 200 micrograms per cubic metre. Pollution particles may also be a vector for pathogens, as well as exacerbating existing health problems. The WHO is now investigating whether airborne pollution particles may be a vector that spreads Covid-19 and makes it more virulent.\r\n\r\nOne of the largest drops in pollution levels could be seen over the city of Wuhan, in central China, which was put under a strict lockdown in late January. The city of 11 million people serves as a major transportation hub and is home to hundreds of factories supplying car parts and other hardware to global supply chains. According to Nasa, nitrogen dioxide levels across eastern and central China have been 10-30% lower than normal.', 'AJ', '2020-03-30 01:46:32'),
(65, 38, 'Getting started with PythonLanguage', 'Computing', 'Section 1.1: Getting StartedPython is a widely used high-level programming language for general-purpose programming, created by Guido vanRossum and first released in 1991. Python features a dynamic type system and automatic memory managementand supports multiple programming paradigms, including object-oriented, imperative, functional programming,and procedural styles. It has a large and comprehensive standard library.Two major versions of Python are currently in active use:Python 3.x is the current version and is under active development.Python 2.x is the legacy version and will receive only security updates until 2020. No new features will beimplemented. Note that many projects still use Python 2, although migrating to Python 3 is getting easier.You can download and install either version of Python here. See Python 3 vs. Python 2 for a comparison betweenthem. In addition, some third-parties offer re-packaged versions of Python that add commonly used libraries andother features to ease setup for common use cases, such as math, data analysis or scientific use. See the list at theofficial site.Verify if Python is installedTo confirm that Python was installed correctly, you can verify that by running the following command in yourfavorite terminal (If you are using Windows OS, you need to add path of python to the environment variable beforeusing it in command prompt):$ python --version\r\nGoalKicker.com – Python® Notes for Professionals3Python 3.xVersion ≥ 3.0If you have Python 3 installed, and it is your default version (see Troubleshooting for more details) you should seesomething like this:$ python --versionPython 3.6.0Python 2.xVersion ≤ 2.7If you have Python 2 installed, and it is your default version (see Troubleshooting for more details) you should seesomething like this:$ python --versionPython 2.7.13If you have installed Python 3, but $ python --version outputs a Python 2 version, you also have Python 2installed. This is often the case on MacOS, and many Linux distributions. Use $ python3 instead to explicitly use thePython 3 interpreter.Hello, World in Python using IDLEIDLE is a simple editor for Python, that comes bundled with Python.How to create Hello, World program in IDLEOpen IDLE on your system of choice.In older versions of Windows, it can be found at All Programs under the Windows menu.In Windows 8+, search for IDLE or find it in the apps that are present in your system.On Unix-based (including Mac) systems you can open it from the shell by typing $ idlepython_file.py.It will open a shell with options along the top.In the shell, there is a prompt of three right angle brackets:>>>Now write the following code in the prompt:>>>print(\"Hello, World\")Hit  Enter .>>>print(\"Hello, World\")Hello, WorldHello World Python fileCreate a new file hello.py that contains the following line:Python 3.xVersion ≥ 3.0print(\'Hello, World\')Python 2.xVersion ≥ 2.6You can use the Python 3 print function in Python 2 with the following import statement:\r\nGoalKicker.com – Python® Notes for Professionals4from__future__import print_functionPython 2 has a number of functionalities that can be optionally imported from Python 3 using the __future__module, as discussed here.Python 2.xVersion ≤ 2.7If using Python 2, you may also type the line below. Note that this is not valid in Python 3 and thus notrecommended because it reduces cross-version code compatibility.print\'Hello, World\'In your terminal, navigate to the directory containing the file hello.py.Type python hello.py, then hit the  Enter  key.$ python hello.pyHello, WorldYou should see Hello, World printed to the console.You can also substitute hello.py with the path to your file. For example, if you have the file in your home directoryand your user is \"user\" on Linux, you can type python /home/user/hello.py.Launch an interactive Python shell', 'AJ', '2020-03-30 23:06:25'),
(66, 38, 'Python Data Types', 'Computing', 'Data types are nothing but variables you use to reserve some space in memory. Python variables do not need anexplicit declaration to reserve memory space. The declaration happens automatically when you assign a value to avariable.Section 2.1: String Data TypeString are identified as a contiguous set of characters represented in the quotation marks. Python allows for eitherpairs of single or double quotes. Strings are immutable sequence data type, i.e each time one makes any changesto a string, completely new string object is created.a_str =\'Hello World\'print(a_str)#output will be whole string. Hello Worldprint(a_str[0])#output will be first character. Hprint(a_str[0:5])#output will be first five characters. HelloSection 2.2: Set Data TypesSets are unordered collections of unique objects, there are two types of set:Sets - They are mutable and new elements can be added once sets are defined1.basket ={\'apple\',\'orange\',\'apple\',\'pear\',\'orange\',\'banana\'}print(basket)# duplicates will be removed>{\'orange\',\'banana\',\'pear\',\'apple\'}a =set(\'abracadabra\')print(a)# unique letters in a>{\'a\',\'r\',\'b\',\'c\',\'d\'}a.add(\'z\')print(a)>{\'a\',\'c\',\'r\',\'b\',\'z\',\'d\'}Frozen Sets - They are immutable and new elements cannot added after its defined.2.b =frozenset(\'asdfagsa\')print(b)>frozenset({\'f\',\'g\',\'d\',\'a\',\'s\'})cities =frozenset([\"Frankfurt\",\"Basel\",\"Freiburg\"])print(cities)>frozenset({\'Frankfurt\',\'Basel\',\'Freiburg\'})Section 2.3: Numbers data typeNumbers have four types in Python. Int, float, complex, and long.int_num =10#int valuefloat_num =10.2#float valuecomplex_num = 3.14j    #complex valuelong_num = 1234567L    #long value\r\nGoalKicker.com – Python® Notes for Professionals34Section 2.4: List Data TypeA list contains items separated by commas and enclosed within square brackets [].lists are almost similar to arraysin C. One difference is that all the items belonging to a list can be of different data type.list=[123,\'abcd\',10.2,\'d\']#can be an array of any data type or single data type.list1 =[\'hello\',\'world\']print(list)#will output whole list. [123,\'abcd\',10.2,\'d\']print(list[0:2])#will output first two element of list. [123,\'abcd\']print(list1 * 2)#will gave list1 two times. [\'hello\',\'world\',\'hello\',\'world\']print(list + list1)#will gave concatenation of both the lists.[123,\'abcd\',10.2,\'d\',\'hello\',\'world\']Section 2.5: Dictionary Data TypeDictionary consists of key-value pairs. It is enclosed by curly braces {} and values can be assigned and accessedusing square brackets[].dic={\'name\':\'red\',\'age\':10}print(dic)#will output all the key-value pairs. {\'name\':\'red\',\'age\':10}print(dic[\'name\'])#will output only value with \'name\' key. \'red\'print(dic.values())#will output list of values in dic. [\'red\',10]print(dic.keys())#will output list of keys. [\'name\',\'age\']Section 2.6: Tuple Data TypeLists are enclosed in brackets [ ] and their elements and size can be changed, while tuples are enclosed inparentheses ( ) and cannot be updated. Tuples are immutable.tuple=(123,\'hello\')tuple1 =(\'world\')print(tuple)#will output whole tuple. (123,\'hello\')print(tuple[0])#will output first value. (123)print(tuple + tuple1)#will output (123,\'hello\',\'world\')tuple[1]=\'update\'#this will give you error.', 'AJ', '2020-03-30 23:07:48'),
(67, 38, 'Indentation', 'Computing', 'For Python, Guido van Rossum based the grouping of statements on indentation. The reasons for this are explainedin the first section of the \"Design and History Python FAQ\". Colons, :, are used to declare an indented code block,such as the following example:class ExampleClass:#Every function belonging to a class must be indented equallydef__init__(self):        name =\"example\"def someFunction(self, a):#Notice everything belonging to a function must be indentedif a >5:returnTrueelse:returnFalse#If a function is not indented to the same level it will not be considers as part of the parent classdef separateFunction(b):for i in b:#Loops are also indented and nested conditions start a new indentationif i ==1:returnTruereturnFalseseparateFunction([2,3,5,6,1])Spaces or Tabs?The recommended indentation is 4 spaces but tabs or spaces can be used so long as they are consistent. Do notmix tabs and spaces in Python as this will cause an error in Python 3 and can causes errors in Python 2.Section 3.2: How Indentation is ParsedWhitespace is handled by the lexical analyzer before being parsed.The lexical analyzer uses a stack to store indentation levels. At the beginning, the stack contains just the value 0,which is the leftmost position. Whenever a nested block begins, the new indentation level is pushed on the stack,and an \"INDENT\" token is inserted into the token stream which is passed to the parser. There can never be morethan one \"INDENT\" token in a row (IndentationError).When a line is encountered with a smaller indentation level, values are popped from the stack until a value is on topwhich is equal to the new indentation level (if none is found, a syntax error occurs). For each value popped, a\"DEDENT\" token is generated. Obviously, there can be multiple \"DEDENT\" tokens in a row.The lexical analyzer skips empty lines (those containing only whitespace and possibly comments), and will nevergenerate either \"INDENT\" or \"DEDENT\" tokens for them.At the end of the source code, \"DEDENT\" tokens are generated for each indentation level left on the stack, until justthe 0 is left.', 'AJ', '2020-03-30 23:08:24'),
(68, 38, 'Comments and Documentation', 'Computing', 'Section 4.1: Single line, inline and multiline commentsComments are used to explain code when the basic code itself isn\'t clear.Python ignores comments, and so will not execute code in there, or raise syntax errors for plain English sentences.Single-line comments begin with the hash character (#) and are terminated by the end of line.Single line comment:# This is a single line comment in PythonInline comment:print(\"Hello World\")# This line prints \"Hello World\"Comments spanning multiple lines have \"\"\" or \'\'\' on either end. This is the same as a multiline string, butthey can be used as comments:\"\"\"This type of comment spans multiple lines.These are mostly used for documentation of functions, classes and modules.\"\"\"Section 4.2: Programmatically accessing docstringsDocstrings are - unlike regular comments - stored as an attribute of the function they document, meaning that youcan access them programmatically.An example functiondef func():\"\"\"This is a function that does nothing at all\"\"\"returnThe docstring can be accessed using the __doc__ attribute:print(func.__doc__)This is a function that does nothing at allhelp(func)Help on function func in module __main__:func()This is a function that does nothing at allAnother example function\r\nGoalKicker.com – Python® Notes for Professionals38function.__doc__ is just the actual docstring as a string, while the help function provides general informationabout a function, including the docstring. Here\'s a more helpful example:def greet(name, greeting=\"Hello\"):\"\"\"Print a greeting to the user `name`    Optional parameter `greeting` can change what they\'re greeted with.\"\"\"print(\"{} {}\".format(greeting, name))help(greet)Help on function greet in module __main__:greet(name, greeting=\'Hello\')Print a greeting to the user nameOptional parameter greeting can change what they\'re greeted with.Advantages of docstrings over regular commentsJust putting no docstring or a regular comment in a function makes it a lot less helpful.def greet(name, greeting=\"Hello\"):# Print a greeting to the user `name`# Optional parameter `greeting` can change what they\'re greeted with.print(\"{} {}\".format(greeting, name))print(greet.__doc__)Nonehelp(greet)Help on function greet in module main:greet(name, greeting=\'Hello\')Section 4.3: Write documentation using docstringsA docstring is a multi-line comment used to document modules, classes, functions and methods. It has to be thefirst statement of the component it describes.def hello(name):\"\"\"Greet someone.    Print a greeting (\"Hello\") for the person with the given name.    \"\"\"print(\"Hello \"+name)class Greeter:\"\"\"An object used to greet people.', 'AJ', '2020-03-30 23:09:52'),
(69, 38, ' Python Anti-Patterns', 'Computing', 'Section 199.1: Overzealous except clauseExceptions are powerful, but a single overzealous except clause can take it all away in a single line.try: res = get_result() res = res[0] log(\'got result: %r\' % res) except: if not res: res = \'\' print(\'got exception\')This example demonstrates 3 symptoms of the antipattern:The except with no exception type (line 5) will catch even healthy exceptions, including KeyboardInterrupt.1.That will prevent the program from exiting in some cases.The except block does not reraise the error, meaning that we won\'t be able to tell if the exception came from2.within get_result or because res was an empty list.Worst of all, if we were worried about result being empty, we\'ve caused something much worse. If3.get_result fails, res will stay completely unset, and the reference to res in the except block, will raiseNameError, completely masking the original error.Always think about the type of exception you\'re trying to handle. Give the exceptions page a read and get a feel forwhat basic exceptions exist.Here is a fixed version of the example above:import traceback try: res = get_result() except Exception: log_exception(traceback.format_exc()) raise try: res = res[0]except IndexError: res = \'\' log(\'got result: %r\' % res)We catch more specific exceptions, reraising where necessary. A few more lines, but infinitely more correct.Section 199.2: Looking before you leap with processor-intensive functionA program can easily waste time by calling a processor-intensive function multiple times.For example, take a function which looks like this: it returns an integer if the input value can produce one, elseNone:def intensive_f(value): # int -> Optional[int]# complex, and time-consuming codeif process_has_failed:returnNonereturn integer_outputAnd it could be used in the following way:x =5if intensive_f(x)isnotNone:print(intensive_f(x) / 2)else:print(x,\"could not be processed\")print(x)Whilst this will work, it has the problem of calling intensive_f, which doubles the length of time for the code torun. A better solution would be to get the return value of the function beforehand', 'AJ', '2020-03-30 23:16:11'),
(70, 38, 'test', 'Computing', 'testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest', 'AJ', '2020-03-31 12:46:01'),
(71, 38, 'testtttt', 'Computing', 'CORRECTION DE L\'ARTICLE : TESTTTTT\r\n\r\n', 'AJ', '2020-04-11 22:10:03'),
(72, 38, 'testV3', 'Mathematics', 'TESTT', 'AJ', '2020-04-11 22:10:29'),
(73, 38, 'testV999999', 'Physics', 'TESTV99999', 'IR', '2020-04-11 22:26:25'),
(74, 49, 'Les bases de la programmation en C', 'Computing', 'Le C a été conçu en 1972 par Dennis Richie et Ken Thompson, chercheurs aux Bell Labs, afin de développer un système d\'exploitation UNIX sur un DEC PDP-11. En 1978, Brian Kernighan et Dennis Richie publient la définition classique du C dans le livre The C Programming language [6]. Le C devenant de plus en plus populaire dans les années 80, plusieurs groupes mirent sur le marché des compilateurs comportant des extensions particulières. En 1983, l\'ANSI (American National Standards Institute) décida de normaliser le langage ; ce travail s\'acheva en 1989 par la définition de la norme ANSI C. Celle-ci fut reprise telle quelle par l\'ISO (International Standards Organization) en 1990. C\'est ce standard, ANSI C, qui est décrit dans le présent document.\r\n\r\nLe mot-clef chardésigne un objet de type caractère. Un char peut contenir n\'importe quel élément du jeu de caractères de la machine utilisée. La plupart du temps, un objet de type char est codé sur un octet ; c\'est l\'objet le plus élémentaire en C. Le jeu de caractères utilisé correspond généralement au codage ASCII (sur 7 bits). La plupart des machines utilisent désormais le jeu de caractères ISO-8859 (sur 8 bits), dont les 128 premiers caractères correspondent aux caractères ASCII. Les 128 derniers caractères (codés sur 8 bits) sont utilisés pour les caractères propres aux différentes langues. La version ISO-8859-1 (aussi appelée ISO-LATIN-1) est utilisée pour les langues d\'Europe occidentale. Ainsi, le caractère de code 232 est le è, le caractère 233 correspond au é...Pour plus de détails sur l\'historique du codage des caractères pour les différentes langues ainsi que sur la norme UNICODE (sur 16 bits, qui permet de coder les caractères pour toutes les langues) et sur la norme ISO/IEC-10646 (sur 32 bits, ce qui permet d\'ajouter les caractères anciens), consulter l\'article de J. André et M. Goossens [1].\r\nUne des particularités du type char en C est qu\'il peut être assimilé à un entier : tout objet de type char peut être utilisé dans une expression qui utilise des objets de type entier. Par exemple, si c est de type char, l\'expression c + 1 est valide. Elle désigne le caractère suivant dans le code ASCII. La table précédente donne le code ASCII (en décimal, en octal et en hexadécimal) des caractères imprimables. Ainsi, le programme suivant imprime le caractère \'B\'.\r\n', 'AJ', '2020-04-16 21:24:45'),
(75, 49, 'PRESENTATION DU C++', 'Computing', 'Apparu au d´ebut des ann´ees 90, le langage C++ est actuellement l’un des plus utilis´es dans le monde,\r\naussi bien pour les applications scientifiques que pour le d´eveloppement des logiciels. En tant qu’h´eritier\r\ndu langage C, le C++ est d’une grande efficacit´e. Mais il a en plus des fonctionnalit´es puissantes, comme\r\npar exemple la notion de classe, qui permet d’appliquer les techniques de la programmation-objet.\r\nLe but de ce cours est de pr´esenter la syntaxe de base du langage C++. Certains traits propres au C,\r\ndont l’usage s’av`ere p´erilleux, sont pass´es sous silence. La programmation-objet, quant `a elle, sera abord´ee\r\ndans un autre cours.\r\n) Programmer un ordinateur, c’est lui fournir une s´erie d’instructions qu’il doit ex´ecuter. Ces instructions sont g´en´eralement ´ecrites dans un langage dit ´evolu´e, puis, avant d’ˆetre ex´ecut´ees, sont traduites\r\nen langage machine (qui est le langage du microprocesseur). Cette traduction s’appelle compilation et\r\nelle est effectu´ee automatiquement par un programme appel´e compilateur.\r\nPour le programmeur, cette traduction automatique implique certaines contraintes :\r\n– il doit ´ecrire les instructions selon une syntaxe rigoureuse,\r\n– il doit d´eclarer les donn´ees et fonctions qu’il va utiliser (ainsi le compilateur pourra r´eserver aux\r\ndonn´ees une zone ad´equate en m´emoire et pourra v´erifier que les fonctions sont correctement\r\nemploy´ees).\r\n) Un programme ´ecrit en C++ se compose g´en´eralement de plusieurs fichiers-sources. Il y a deux\r\nsortes de fichiers-sources :\r\n– ceux qui contiennent effectivement des instructions ; leur nom poss`ede l’extension .cpp,\r\n– ceux qui ne contiennent que des d´eclarations ; leur nom poss`ede l’extension .h (signifiant“header”\r\nou en-tˆete).\r\nUn fichier .h sert `a regrouper des d´eclarations qui sont communes `a plusieurs fichiers .cpp, et\r\npermet une compilation correcte de ceux-ci. Pour ce faire, dans un fichier .cpp on pr´evoit l’inclusion\r\nautomatique des fichiers .h qui lui sont n´ecessaires, grˆace aux directives de compilation #include. En\r\nsupposant que le fichier `a inclure s’appelle untel.h, on ´ecrira #include <untel.h> s’il s’agit d’un fichier\r\nde la biblioth`eque standard du C++, ou #include \"untel.h\" s’il s’agit d’un fichier ´ecrit par nous-mˆemes', 'AJ', '2020-04-16 21:26:26'),
(76, 49, 'Guide de MySQL', 'Computing', 'MySQL est la base de données open source la plus populaire au monde. Bien qu\'elle soit avant tout connue pour son utilisation par des sociétés Web, telles que Google, Facebook et Yahoo!, MySQL est également une base de données embarquée très populaire. Plus de 3000 éditeurs de logiciels et fabricants de matériel lui font confiance, parmi lesquels sept des dix plus grandes entreprises logicielles au monde. Ce livre blanc examine en premier lieu les bases de données embarquées en général - leur nature, le marché des bases de données embarquées, et les avantages d’embarquer une base de données par rapport à supporter celles de vos clients ou développer votre propre base de données embarquée. Nous commencerons par aborder l\'impact de l\'utilisation de MySQL en tant que base de données embarquée sur les trois facteurs fondamentaux de la réussite commerciale - à savoir les coûts, le chiffre d\'affaires et les risques - en réduisant le coût des marchandises vendues (COGS), augmentant la satisfaction client et réduisant les risques.\r\n\r\nL\'objectif de ce livre blanc est de répondre aux questions suivantes: Pourquoi utiliser une base de données embarquée? Et pourquoi utiliser MySQL comme base de données embarquée pour mes produits? C\'est une excellente référence, une compilation de faits et d\'informations contenant de nombreux liens vers de plus amples informations, la plupart du temps techniques, ou concernant nos clients et leurs expériences avec MySQL.\r\n', 'AJ', '2020-04-16 21:28:20'),
(77, 49, 'THÉORIE DE LA RELATIVITÉ', 'Physics', 'Albert Einstein propose, en 1905, la théorie de la relativité restreinte comme un nouveau cadre pour décrire de façon cohérente les phénomènes physiques mettant en jeu des vitesses proches de celle de la lumière. En imposant l\'universalité de la vitesse de la lumière, la relativité restreinte mène à une description profondément modifiée de toute la physique, dont la toile de fond devient un espace-temps quadridimensionnel. Des concepts aussi importants que la simultanéité de deux événements ou la longueur d\'un objet deviennent relatifs aux référentiels dans lesquels on les observe. La masse (m) d\'un corps est comprise comme son énergie (E) au repos (E = mc2), c étant la vitesse de la lumière. Les nombreuses conséquences expérimentales de la relativité restreinte ont été maintes fois confirmées. En 1915, Einstein généralise le principe de relativité et en déduit une nouvelle théorie de la gravitation fondée sur la notion d\'espace-temps courbe.', 'AJ', '2020-04-16 21:31:30'),
(78, 49, 'HISTORIQUE DU LANGAGE PHP', 'Computing', 'L\'origine de PHP remonte à 1995 quand Rasmus Lerdorf a créé PHP/FI, une librairie de scripts Perl\r\nutilisés pour la publication de son CV sur son site personnel. Au fur et à mesure des évolutions, la\r\nlibrairie a été portée en C et agrémentée de nouvelles fonctionnalités pour créer des pages\r\ndynamiques simples pour le web et accéder à quelques sources de données. PHP/FI signifie\r\nPersonal Home Page/Forms Interpreter.\r\nPHP/FI 2.0 sort en 1997, toujours développé par une seule personne. C\'est le succès : 50000 sites\r\n(1% des noms de domaines) disent l\'utiliser ou le supporter. Les contributeurs affluent.\r\nPHP 3.0 sort en juin 1998, c\'est la première version développée conjointement par Rasmus Lerdorf,\r\nAndi Gutmans et Zeev Suraski et entièrement réécrite (les versions précédentes étaient trop lentes\r\npour une application commerciale). Outre les performances, PHP 3 est modulaire et extensible,\r\npermettant de lui greffer des API supplémentaires, ce qui n\'a pas manqué avec le support de\r\nnombreuses bases de données, de formats et de protocoles, une syntaxe plus cohérente et un support\r\nbasique de l\'objet. Il a été installé sur 10% du parc mondial des serveurs web avec des dizaines de\r\nmilliers de développeurs et des centaines de milliers de sites.\r\nLe moteur de PHP 4 a été repensé afin d\'en améliorer les performances pour des applications\r\ncomplexes et d\'augmenter encore la modularité. Un nouveau moteur a vu le jour, appelé Zend\r\nEngine (contraction de Zeev et Andi). PHP 4 sort officiellement en mai 2000 et apporte des\r\nperformances accrues, le supports de plusieurs serveurs web, les sessions, une sécurité accrue. C\'est\r\nactuellement la dernière version stable (nous ne comptons pas les 4.1, 4.2 et 4.3).\r\nEt PHP 5 ? Actuellement en version beta, un cycle qui peut durer plusieurs mois, le but de PHP 5\r\nest une amélioration des performances du moteur Zend (Zend Engine 2), un modèle objet étendu et\r\ntrès proche du C++, une compatibilité accrue avec de nouveaux standards et les anciens (RPC,\r\nXML, .NET, ...)', 'AJ', '2020-04-16 21:35:18');
INSERT INTO `article` (`article_id`, `author_id`, `title`, `domain`, `content`, `state`, `created_at`) VALUES
(79, 49, 'Développement de logiciel', 'Computing', 'Le développement de logiciel consiste à étudier, concevoir, construire, transformer, mettre au point, maintenir et améliorer des logiciels.\r\n\r\nCe travail est effectué par les employés d\'éditeurs de logiciels, de sociétés de services et d\'ingénierie informatique (SSII), des travailleurs indépendants (freelance) et des membres de la communauté du logiciel libre.\r\n\r\nUn logiciel est créé petit à petit par une équipe d\'ingénieurs conformément à un cahier des charges établi par un client demandeur ou une équipe interne. Le logiciel est décomposé en différents modules et un chef de projet, ou architecte, se charge de la cohérence de l\'ensemble.\r\n\r\nDifférentes activités permettent de prendre connaissance des attentes de l\'usager, créer un modèle théorique du logiciel, qui servira de plan de construction, puis construire le logiciel, contrôler son bon fonctionnement et son adéquation au besoin. La planification et la répartition des travaux permet d\'anticiper le délai et le coût de fabrication.\r\n\r\nLe logiciel est accompagné d\'une procédure d\'installation, d\'une procédure de vérification de bonne installation, de documentation (parfois créé automatiquement à partir de commentaires placés à cet effet dans le code source) et d\'une équipe d\'assistance au déploiement et à la maintenance, désignée sous le nom de support.\r\n\r\nOutre les travaux d\'analyse, de conception, de construction et de tests, une procédure de recette - simulacre d\'acquisition, permettra de déterminer si le logiciel peut être considéré comme utilisable', 'AJ', '2020-04-16 21:48:50');

-- --------------------------------------------------------

--
-- Structure de la table `articleaccepted`
--

CREATE TABLE `articleaccepted` (
  `article_accepted_id` int(11) NOT NULL,
  `reviewer_id` int(11) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `accepted_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Structure de la table `articlereviewed`
--

CREATE TABLE `articlereviewed` (
  `article_reviewed_id` int(11) NOT NULL,
  `reviewer_id` int(11) NOT NULL,
  `observation` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `reviewed_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `articlereviewed`
--

INSERT INTO `articlereviewed` (`article_reviewed_id`, `reviewer_id`, `observation`, `created_at`, `reviewed_id`) VALUES
(46, 37, 'test obsetvation', '2020-03-21 17:24:05', 1),
(45, 37, 'First observation from website interface', '2020-03-21 21:24:58', 2),
(57, 37, 'Mmmm had l article ziina ella l programmation wkda lmmhm raak teema rani  ghe ntestee l observation w dak reefs laakhurr, hadshii ybaanlii mzzyan mkhyeer gaae.', '2020-03-22 02:03:27', 3),
(46, 37, 'Ma3eejbetniish had l article', '2020-03-22 02:33:13', 4),
(46, 37, 'My Observation', '2020-03-22 02:52:33', 5),
(58, 38, '0000000000000000', '2020-03-30 00:56:29', 6),
(59, 38, 'ACCEPTERTTTTTT', '2020-03-30 01:10:59', 7),
(60, 38, '1111111111111111111111111101010100111111111111111111111', '2020-03-30 01:11:19', 8),
(61, 38, 'AZERTYUIOPML.?NBVCXWSDFGHJ', '2020-03-30 01:11:42', 9),
(62, 38, 'AZERTYUIOPML.?NBVCXWSDFGHJ', '2020-03-30 01:48:42', 10),
(63, 38, 'AZERTYUIOPLKJHGFDSQWXCVBN?.\r\n', '2020-03-30 01:49:02', 11),
(64, 38, '1234567890°0987654321²', '2020-03-30 01:49:18', 12),
(65, 38, 'Saisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\n', '2020-03-30 23:11:16', 13),
(66, 38, 'Saisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\n', '2020-03-30 23:11:28', 14),
(67, 38, 'Saisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\n', '2020-03-30 23:11:40', 15),
(68, 38, 'Saisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\nSaisir l\'observation de l\'article : Getting started with PythonLanguage\r\n', '2020-03-30 23:11:57', 16),
(69, 38, 'AQWZSXEDCRFVTGNYH?', '2020-03-30 23:17:26', 17),
(70, 38, 'vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv', '2020-03-31 12:47:03', 18),
(71, 38, '0111111111111101010100101111111111124324765624701730', '2020-04-11 22:13:42', 19),
(72, 38, 'AZERTYUIOPÂ¨Â£%M.?NBVCX N?.', '2020-04-11 22:27:15', 20),
(74, 49, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : LES BASES DE LA PROGRAMMATION EN C\r\n', '2020-04-16 21:36:56', 21),
(77, 49, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : THÉORIE DE LA RELATIVITÉ', '2020-04-16 21:37:11', 22),
(78, 49, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : HISTORIQUE DU LANGAGE PHP', '2020-04-16 21:37:26', 23),
(75, 38, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : PRESENTATION DU C++', '2020-04-16 21:37:52', 24),
(76, 38, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : GUIDE DE MYSQL', '2020-04-16 21:38:09', 25),
(71, 49, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : TESTTTTT\r\n\r\n', '2020-04-16 21:47:28', 26),
(79, 38, 'SAISIR L\'OBSERVATION DE L\'ARTICLE : DÉVELOPPEMENT DE LOGICIEL', '2020-04-16 21:49:35', 27);

-- --------------------------------------------------------

--
-- Structure de la table `articletocorrect`
--

CREATE TABLE `articletocorrect` (
  `article_tocorrect_id` int(11) NOT NULL,
  `reviewer_id` int(11) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `tocorrect_id` int(11) NOT NULL,
  `corrected` tinyint(1) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `articletocorrect`
--

INSERT INTO `articletocorrect` (`article_tocorrect_id`, `reviewer_id`, `created_at`, `tocorrect_id`, `corrected`) VALUES
(46, 37, '2020-03-22 02:17:08', 1, 1),
(46, 37, '2020-03-22 02:40:02', 2, 0),
(71, 38, '2020-04-11 22:14:28', 3, 1);

-- --------------------------------------------------------

--
-- Structure de la table `articletoreview`
--

CREATE TABLE `articletoreview` (
  `article_toreview_id` int(11) NOT NULL,
  `reviewer_id` int(11) NOT NULL,
  `reviewed` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `toreview_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `articletoreview`
--

INSERT INTO `articletoreview` (`article_toreview_id`, `reviewer_id`, `reviewed`, `created_at`, `toreview_id`) VALUES
(46, 37, 1, '2020-03-21 15:14:53', 1),
(45, 37, 1, '2020-03-21 17:33:18', 2),
(57, 37, 1, '2020-03-22 02:01:23', 3),
(46, 37, 1, '2020-03-22 02:31:48', 4),
(46, 37, 1, '2020-03-22 02:52:08', 5),
(58, 38, 1, '2020-03-30 00:56:02', 6),
(61, 38, 1, '2020-03-30 01:10:07', 7),
(60, 38, 1, '2020-03-30 01:10:15', 8),
(59, 38, 1, '2020-03-30 01:10:23', 9),
(64, 38, 1, '2020-03-30 01:46:57', 10),
(63, 38, 1, '2020-03-30 01:47:07', 11),
(62, 38, 1, '2020-03-30 01:47:14', 12),
(68, 38, 1, '2020-03-30 23:10:11', 13),
(67, 38, 1, '2020-03-30 23:10:20', 14),
(66, 38, 1, '2020-03-30 23:10:27', 15),
(65, 38, 1, '2020-03-30 23:10:35', 16),
(69, 38, 1, '2020-03-30 23:16:42', 17),
(70, 38, 1, '2020-03-31 12:46:30', 18),
(72, 38, 1, '2020-04-11 22:11:17', 19),
(71, 38, 1, '2020-04-11 22:11:32', 20),
(73, 35, 0, '2020-04-11 22:26:51', 21),
(78, 49, 1, '2020-04-16 21:35:41', 22),
(77, 49, 1, '2020-04-16 21:35:47', 23),
(76, 38, 1, '2020-04-16 21:35:54', 24),
(75, 38, 1, '2020-04-16 21:36:04', 25),
(74, 49, 1, '2020-04-16 21:36:11', 26),
(71, 49, 1, '2020-04-16 21:39:27', 27),
(79, 38, 1, '2020-04-16 21:49:06', 28);

-- --------------------------------------------------------

--
-- Structure de la table `author`
--

CREATE TABLE `author` (
  `author_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `author`
--

INSERT INTO `author` (`author_id`) VALUES
(35),
(37),
(38),
(40),
(49);

-- --------------------------------------------------------

--
-- Structure de la table `editor`
--

CREATE TABLE `editor` (
  `editor_id` int(11) NOT NULL,
  `accepted` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `editor`
--

INSERT INTO `editor` (`editor_id`, `accepted`) VALUES
(36, 0),
(39, 0);

-- --------------------------------------------------------

--
-- Structure de la table `newsletter`
--

CREATE TABLE `newsletter` (
  `ID` int(10) NOT NULL,
  `email` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Déchargement des données de la table `newsletter`
--

INSERT INTO `newsletter` (`ID`, `email`, `date`) VALUES
(2, 'testositeweb@gmail.com', '2020-04-12 02:32:36');

-- --------------------------------------------------------

--
-- Structure de la table `reviewer`
--

CREATE TABLE `reviewer` (
  `reviewer_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `reviewer`
--

INSERT INTO `reviewer` (`reviewer_id`) VALUES
(35),
(37),
(38),
(40),
(49);

-- --------------------------------------------------------

--
-- Structure de la table `user`
--

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL,
  `name` varchar(30) NOT NULL,
  `email` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `job` varchar(30) DEFAULT NULL,
  `type` varchar(1) NOT NULL,
  `email_verified` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `user`
--

INSERT INTO `user` (`user_id`, `name`, `email`, `password`, `job`, `type`, `email_verified`, `created_at`) VALUES
(35, 'CRA MIRRAI', 'CRA.Mirrai@gmail.com', '859ca87ffecfcf012bb972d995301191195abbf2', 'Student', 'A', 1, '2020-03-19 15:40:39'),
(36, 'Admin', 'hez.zoj@gmail.Com', '859ca87ffecfcf012bb972d995301191195abbf2', 'Professor', 'E', 1, '2020-03-19 21:12:57'),
(37, 'Another Reviewer', 'ELIO_class@hotmail.com', '859ca87ffecfcf012bb972d995301191195abbf2', 'Professor', 'R', 1, '2020-03-21 13:33:36'),
(38, 'EL BAROUDI Marouane', 'testositeweb@gmail.com', '87acec17cd9dcd20a716cc2cf67417b71c8a7016', 'Student', 'A', 1, '2020-03-24 18:04:18'),
(39, 'EL BAROUDI', 'marouanelbaroudi@gmail.com', '87acec17cd9dcd20a716cc2cf67417b71c8a7016', 'Student', 'E', 1, '2020-03-24 20:07:48'),
(40, 'MR', 'marouanelbaroudi1@gmail.com', '87acec17cd9dcd20a716cc2cf67417b71c8a7016', 'Engineer', 'E', 1, '2020-03-24 20:26:22'),
(49, 'ELBR', 'marouaneelbaroudi1@gmail.com', '87acec17cd9dcd20a716cc2cf67417b71c8a7016', 'Others', 'A', 1, '2020-03-24 21:52:31');

-- --------------------------------------------------------

--
-- Structure de la table `volume`
--

CREATE TABLE `volume` (
  `volume_id` int(11) NOT NULL,
  `volume_contenu` longtext NOT NULL,
  `date_from` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `date_to` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `background` varchar(100) NOT NULL,
  `summary` text NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Déchargement des données de la table `volume`
--

INSERT INTO `volume` (`volume_id`, `volume_contenu`, `date_from`, `date_to`, `background`, `summary`, `created_at`) VALUES
(1, 'BLACK HOLE\nPhysics\nWritten by : \nEL BAROUDI Marouane\nA black hole is a region of spacetime exhibiting gravitational acceleration so \nstrong that nothingŠno particles or even electromagnetic radiation such as \nlightŠcan escape from it.[6] The theory of general relativity predicts that a \nsufficiently compact mass can deform spacetime to form a black hole.[7][8] The \nboundary of the region from which no escape is possible is called the event \nhorizon. Although the event horizon has an enormous effect on the fate and \ncircumstances of an object crossing it, no locally detectable features appear to \nbe observed.[9] In many ways, a black hole acts like an ideal black body, as it \nreflects no light.[10][11] Moreover, quantum field theory in curved spacetime \npredicts that event horizons emit Hawking radiation, with the same spectrum as \na black body of a temperature inversely proportional to its mass. This \ntemperature is on the order of billionths of a kelvin for black holes of stellar \nmass, making it essentially impossible to observe. Objects whose gravitational \nfields are too strong for light to escape were first considered in the 18th \ncentury by John Michell and Pierre-Simon Laplace.[12] The first modern \nsolution of general relativity that would characterize a black hole was found by \nKarl Schwarzschild in 1916, although its interpretation as a region of space \nfrom which nothing can escape was first published by David Finkelstein in \n1958. Black holes were long considered a mathematical curiosity; it was during \nthe 1960s that theoretical work showed they were a generic prediction of \ngeneral relativity. The discovery of neutron stars by Jocelyn Bell Burnell in 1967 \nsparked interest in gravitationally collapsed compact objects as a possible \nastrophysical reality. Black holes of stellar mass are expected to form when \nvery massive stars collapse at the end of their life cycle. After a black hole has \nformed, it can continue to grow by absorbing mass from its surroundings. By \nabsorbing other stars and merging with other black holes, supermassive black \nholes of millions of solar masses (M?) may form. There is consensus that \nsupermassive black holes exist in the centers of most galaxies. The presence \nof a black hole can be inferred through its interaction with other matter and \nwith electromagnetic radiation such as visible light. Matter that falls onto a black \nhole can form an external accretion disk heated by friction, forming some of the \nTABLE OF CONTENTS\n1\nBlack hole\n2\nSDL Game Development\n3\nCoronavirus pandemic leading to huge drop in air pollution\nBLACK HOLE\nPhysics\nWritten by : \nEL BAROUDI Marouane\nA black hole is a region of spacetime exhibiting gravitational acceleration so \nstrong that nothingŠno particles or even electromagnetic radiation such as \nlightŠcan escape from it.[6] The theory of general relativity predicts that a \nsufficiently compact mass can deform spacetime to form a black hole.[7][8] The \nboundary of the region from which no escape is possible is called the event \nhorizon. Although the event horizon has an enormous effect on the fate and \ncircumstances of an object crossing it, no locally detectable features appear to \nbe observed.[9] In many ways, a black hole acts like an ideal black body, as it \nreflects no light.[10][11] Moreover, quantum field theory in curved spacetime \npredicts that event horizons emit Hawking radiation, with the same spectrum as \na black body of a temperature inversely proportional to its mass. This \ntemperature is on the order of billionths of a kelvin for black holes of stellar \nmass, making it essentially impossible to observe. Objects whose gravitational \nfields are too strong for light to escape were first considered in the 18th \ncentury by John Michell and Pierre-Simon Laplace.[12] The first modern \nsolution of general relativity that would characterize a black hole was found by \nKarl Schwarzschild in 1916, although its interpretation as a region of space \nfrom which nothing can escape was first published by David Finkelstein in \n1958. Black holes were long considered a mathematical curiosity; it was during \nthe 1960s that theoretical work showed they were a generic prediction of \ngeneral relativity. The discovery of neutron stars by Jocelyn Bell Burnell in 1967 \nsparked interest in gravitationally collapsed compact objects as a possible \nastrophysical reality. Black holes of stellar mass are expected to form when \nvery massive stars collapse at the end of their life cycle. After a black hole has \nformed, it can continue to grow by absorbing mass from its surroundings. By \nabsorbing other stars and merging with other black holes, supermassive black \nholes of millions of solar masses (M?) may form. There is consensus that \nsupermassive black holes exist in the centers of most galaxies. The presence \nof a black hole can be inferred through its interaction with other matter and \nwith electromagnetic radiation such as visible light. Matter that falls onto a black \nhole can form an external accretion disk heated by friction, forming some of the \nbrightest objects in the universe. Stars passing too close to a supermassive \nblack hole can be shred into streamers that shine very brightly before being \n\"swallowed.\"[13] If there are other stars orbiting a black hole, their orbits can be \nused to determine the black hole\'s mass and location. Such observations can \nbe used to exclude possible alternatives such as neutron stars. In this way, \nastronomers have identified numerous stellar black hole candidates in binary \nsystems, and established that the radio source known as Sagittarius A*, at the \ncore of the Milky Way galaxy, contains a supermassive black hole of about 4.3 \nmillion solar masses. On 11 February 2016, the LIGO collaboration announced \nthe first direct detection of gravitational waves, which also represented the first \nobservation of a black hole merger.[14] As of December 2018, eleven \ngravitational wave events have been observed that originated from ten merging \nblack holes (along with one binary neutron star merger).[15][16] On 10 April \n2019, the first ever direct image of a black hole and its vicinity was published, \nfollowing observations made by the Event Horizon Telescope in \nSDL GAME DEVELOPMENT\nComputing\nWritten by : \nEL BAROUDI Marouane\nSDL Game Development Copyright © 2013 Packt Publishing All rights reserved. \nNo part of this book may be reproduced, stored in a retrieval system, or \ntransmitted in any form or by any means, without the prior written permission of \nthe publisher, except in the case of brief quotations embedded in critical articles \nor reviews. Every effort has been made in the preparation of this book to \nensure the accuracy of the information presented. However, the information \ncontained in this book is sold without warranty, either express or implied. \nNeither the author, nor Packt Publishing, and its dealers and distributors will be \nheld liable for any damages caused or alleged to be caused directly or \nindirectly by this book. Packt Publishing has endeavored to provide trademark \ninformation about all of the companies and products mentioned in this book by \nthe appropriate use of capitals. However, Packt Publishing cannot guarantee \nthe accuracy of this information. First published: June 2013 Production \nReference: 1170613 Published by Packt Publishing Ltd. Livery Place 35 Livery \nStreet Birmingham B3 2PB, UK. ISBN 978-1-84969-682-1 www.packtpub.com \nCover Image by Shaun Mitchell (shaunmitchell84@googlemail.com) \nCORONAVIRUS PANDEMIC \nLEADING TO HUGE DROP IN AIR \nPOLLUTION\nDivers\nWritten by : \nEL BAROUDI Marouane\nThe coronavirus pandemic is shutting down industrial activity and temporarily \nslashing air pollution levels around the world, satellite imagery from the \nEuropean Space Agency shows. One expert said the sudden shift represented \nthe ﬁlargest scale experiment everﬂ in terms of the reduction of industrial \nemissions. Readings from ESA™s Sentinel-5P satellite show that over the past \nsix weeks, levels of nitrogen dioxide (NO2) over cities and industrial clusters in \nAsia and Europe were markedly lower than in the same period last year. \nNitrogen dioxide is produced from car engines, power plants and other \nindustrial processes and is thought to exacerbate respiratory illnesses such as \nasthma. Advertisement While not a greenhouse gas itself, the pollutant \noriginates from the same activities and industrial sectors that are responsible \nfor a large share of the world™s carbon emissions and that drive global heating. \nPaul Monks, professor of air pollution at the University of Leicester, predicted \nthere will be important lessons to learn. ﬁWe are now, inadvertently, conducting \nthe largest-scale experiment ever seen,ﬂ he said. ﬁAre we looking at what we \nmight see in the future if we can move to a low-carbon economy? Not to \ndenigrate the loss of life, but this might give us some hope from something \nterrible. To see what can be achieved.ﬂ Monks, the former chair of the UK \ngovernment™s science advisory committee on air quality, said that a reduction in \nair pollution could bring some health benefits, though they were unlikely to \noffset loss of life from the disease. Sign up to the Green Light email to get the \nplanet\'s most important stories Read more ﬁIt seems entirely probable that a \nreduction in air pollution will be beneficial to people in susceptible categories, \nfor example some asthma sufferers,ﬂ he said. ﬁIt could reduce the spread of \ndisease. A high level of air pollution exacerbates viral uptake because it \ninflames and lowers immunity.ﬂ Agriculture could also get a boost because \npollution stunts plant growth, he added. The World Health Organization \ndescribes NO2 as ﬁa toxic gas which causes significant inflammation of the \nairwaysﬂ at concentrations above 200 micrograms per cubic metre. Pollution \nparticles may also be a vector for pathogens, as well as exacerbating existing \nhealth problems. The WHO is now investigating whether airborne pollution \nparticles may be a vector that spreads Covid-19 and makes it more virulent. \nOne of the largest drops in pollution levels could be seen over the city of \nWuhan, in central China, which was put under a strict lockdown in late January. \nThe city of 11 million people serves as a major transportation hub and is home \nto hundreds of factories supplying car parts and other hardware to global \nsupply chains. According to Nasa, nitrogen dioxide levels across eastern and \ncentral China have been 10-30% lower than normal. \n', '2020-03-31 00:32:27', '2020-03-30 01:55:44', ' \n \n \nNOM DE VOTRE PROJET\n \nSOUS TITRE EXPLICATIF LE DÉCRIVANT\n \nVOTRE NOM OU ORGANISATION\n \n', 'TABLE OF CONTENTS\n1\nBlack hole\n2\nSDL Game Development\n3\nCoronavirus pandemic leading to huge drop in air pollution\n', '0000-00-00 00:00:00'),
(2, 'GETTING STARTED WITH \nPYTHONLANGUAGE\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 1.1: Getting StartedPython is a widely used high-level programming \nlanguage for general-purpose programming, created by Guido vanRossum and \nfirst released in 1991. Python features a dynamic type system and automatic \nmemory managementand supports multiple programming paradigms, including \nobject-oriented, imperative, functional programming,and procedural styles. It has \na large and comprehensive standard library.Two major versions of Python are \ncurrently in active use:Python 3.x is the current version and is under active \ndevelopment.Python 2.x is the legacy version and will receive only security \nupdates until 2020. No new features will beimplemented. Note that many \nprojects still use Python 2, although migrating to Python 3 is getting easier.You \ncan download and install either version of Python here. See Python 3 vs. \nPython 2 for a comparison betweenthem. In addition, some third-parties offer re-\npackaged versions of Python that add commonly used libraries andother \nfeatures to ease setup for common use cases, such as math, data analysis or \nscientific use. See the list at theofficial site.Verify if Python is installedTo \nconfirm that Python was installed correctly, you can verify that by running the \nfollowing command in yourfavorite terminal (If you are using Windows OS, you \nneed to add path of python to the environment variable beforeusing it in \ncommand prompt):$ python --version GoalKicker.com Œ Python® Notes for \nProfessionals3Python 3.xVersion ? 3.0If you have Python 3 installed, and it is \nyour default version (see Troubleshooting for more details) you should \nseesomething like this:$ python --versionPython 3.6.0Python 2.xVersion ? 2.7If \nyou have Python 2 installed, and it is your default version (see Troubleshooting \nfor more details) you should seesomething like this:$ python --versionPython \n2.7.13If you have installed Python 3, but $ python --version outputs a Python 2 \nversion, you also have Python 2installed. This is often the case on MacOS, and \nmany Linux distributions. Use $ python3 instead to explicitly use thePython 3 \ninterpreter.Hello, World in Python using IDLEIDLE is a simple editor for Python, \nthat comes bundled with Python.How to create Hello, World program in \nTABLE OF CONTENTS\n1\nGetting started with PythonLanguage\n2\nGetting started with PythonLanguage\n3\nPython Data Types\n4\nPython Data Types\n5\nIndentation\n6\nIndentation\n7\nComments and Documentation\n8\nComments and Documentation\n9\nPython Anti-Patterns\n10\nPython Anti-Patterns\nGETTING STARTED WITH \nPYTHONLANGUAGE\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 1.1: Getting StartedPython is a widely used high-level programming \nlanguage for general-purpose programming, created by Guido vanRossum and \nfirst released in 1991. Python features a dynamic type system and automatic \nmemory managementand supports multiple programming paradigms, including \nobject-oriented, imperative, functional programming,and procedural styles. It has \na large and comprehensive standard library.Two major versions of Python are \ncurrently in active use:Python 3.x is the current version and is under active \ndevelopment.Python 2.x is the legacy version and will receive only security \nupdates until 2020. No new features will beimplemented. Note that many \nprojects still use Python 2, although migrating to Python 3 is getting easier.You \ncan download and install either version of Python here. See Python 3 vs. \nPython 2 for a comparison betweenthem. In addition, some third-parties offer re-\npackaged versions of Python that add commonly used libraries andother \nfeatures to ease setup for common use cases, such as math, data analysis or \nscientific use. See the list at theofficial site.Verify if Python is installedTo \nconfirm that Python was installed correctly, you can verify that by running the \nfollowing command in yourfavorite terminal (If you are using Windows OS, you \nneed to add path of python to the environment variable beforeusing it in \ncommand prompt):$ python --version GoalKicker.com Œ Python® Notes for \nProfessionals3Python 3.xVersion ? 3.0If you have Python 3 installed, and it is \nyour default version (see Troubleshooting for more details) you should \nseesomething like this:$ python --versionPython 3.6.0Python 2.xVersion ? 2.7If \nyou have Python 2 installed, and it is your default version (see Troubleshooting \nfor more details) you should seesomething like this:$ python --versionPython \n2.7.13If you have installed Python 3, but $ python --version outputs a Python 2 \nversion, you also have Python 2installed. This is often the case on MacOS, and \nmany Linux distributions. Use $ python3 instead to explicitly use thePython 3 \ninterpreter.Hello, World in Python using IDLEIDLE is a simple editor for Python, \nthat comes bundled with Python.How to create Hello, World program in \nIDLEOpen IDLE on your system of choice.In older versions of Windows, it can \nbe found at All Programs under the Windows menu.In Windows 8+, search for \nIDLE or find it in the apps that are present in your system.On Unix-based \n(including Mac) systems you can open it from the shell by typing $ \nidlepython_file.py.It will open a shell with options along the top.In the shell, \nthere is a prompt of three right angle brackets:>>>Now write the following code \nin the prompt:>>>print(\"Hello, World\")Hit Enter .>>>print(\"Hello, World\")Hello, \nWorldHello World Python fileCreate a new file hello.py that contains the \nfollowing line:Python 3.xVersion ? 3.0print(\'Hello, World\')Python 2.xVersion ? \n2.6You can use the Python 3 print function in Python 2 with the following \nimport statement: GoalKicker.com Œ Python® Notes for \nProfessionals4from__future__import print_functionPython 2 has a number of \nfunctionalities that can be optionally imported from Python 3 using the \n__future__module, as discussed here.Python 2.xVersion ? 2.7If using Python 2, \nyou may also type the line below. Note that this is not valid in Python 3 and \nthus notrecommended because it reduces cross-version code \ncompatibility.print\'Hello, World\'In your terminal, navigate to the directory \ncontaining the file hello.py.Type python hello.py, then hit the Enter key.$ python \nhello.pyHello, WorldYou should see Hello, World printed to the console.You can \nalso substitute hello.py with the path to your file. For example, if you have the \nfile in your home directoryand your user is \"user\" on Linux, you can type \npython /home/user/hello.py.Launch an interactive Python shell \nGETTING STARTED WITH \nPYTHONLANGUAGE\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 1.1: Getting StartedPython is a widely used high-level programming \nlanguage for general-purpose programming, created by Guido vanRossum and \nfirst released in 1991. Python features a dynamic type system and automatic \nmemory managementand supports multiple programming paradigms, including \nobject-oriented, imperative, functional programming,and procedural styles. It has \na large and comprehensive standard library.Two major versions of Python are \ncurrently in active use:Python 3.x is the current version and is under active \ndevelopment.Python 2.x is the legacy version and will receive only security \nupdates until 2020. No new features will beimplemented. Note that many \nprojects still use Python 2, although migrating to Python 3 is getting easier.You \ncan download and install either version of Python here. See Python 3 vs. \nPython 2 for a comparison betweenthem. In addition, some third-parties offer re-\npackaged versions of Python that add commonly used libraries andother \nfeatures to ease setup for common use cases, such as math, data analysis or \nscientific use. See the list at theofficial site.Verify if Python is installedTo \nconfirm that Python was installed correctly, you can verify that by running the \nfollowing command in yourfavorite terminal (If you are using Windows OS, you \nneed to add path of python to the environment variable beforeusing it in \ncommand prompt):$ python --version GoalKicker.com Œ Python® Notes for \nProfessionals3Python 3.xVersion ? 3.0If you have Python 3 installed, and it is \nyour default version (see Troubleshooting for more details) you should \nseesomething like this:$ python --versionPython 3.6.0Python 2.xVersion ? 2.7If \nyou have Python 2 installed, and it is your default version (see Troubleshooting \nfor more details) you should seesomething like this:$ python --versionPython \n2.7.13If you have installed Python 3, but $ python --version outputs a Python 2 \nversion, you also have Python 2installed. This is often the case on MacOS, and \nmany Linux distributions. Use $ python3 instead to explicitly use thePython 3 \ninterpreter.Hello, World in Python using IDLEIDLE is a simple editor for Python, \nthat comes bundled with Python.How to create Hello, World program in \nIDLEOpen IDLE on your system of choice.In older versions of Windows, it can \nbe found at All Programs under the Windows menu.In Windows 8+, search for \nIDLE or find it in the apps that are present in your system.On Unix-based \n(including Mac) systems you can open it from the shell by typing $ \nidlepython_file.py.It will open a shell with options along the top.In the shell, \nthere is a prompt of three right angle brackets:>>>Now write the following code \nin the prompt:>>>print(\"Hello, World\")Hit Enter .>>>print(\"Hello, World\")Hello, \nWorldHello World Python fileCreate a new file hello.py that contains the \nfollowing line:Python 3.xVersion ? 3.0print(\'Hello, World\')Python 2.xVersion ? \n2.6You can use the Python 3 print function in Python 2 with the following \nimport statement: GoalKicker.com Œ Python® Notes for \nProfessionals4from__future__import print_functionPython 2 has a number of \nfunctionalities that can be optionally imported from Python 3 using the \n__future__module, as discussed here.Python 2.xVersion ? 2.7If using Python 2, \nyou may also type the line below. Note that this is not valid in Python 3 and \nthus notrecommended because it reduces cross-version code \ncompatibility.print\'Hello, World\'In your terminal, navigate to the directory \ncontaining the file hello.py.Type python hello.py, then hit the Enter key.$ python \nhello.pyHello, WorldYou should see Hello, World printed to the console.You can \nalso substitute hello.py with the path to your file. For example, if you have the \nfile in your home directoryand your user is \"user\" on Linux, you can type \npython /home/user/hello.py.Launch an interactive Python shell \nPYTHON DATA TYPES\nComputing\nWritten by : \nEL BAROUDI Marouane\nData types are nothing but variables you use to reserve some space in \nmemory. Python variables do not need anexplicit declaration to reserve memory \nspace. The declaration happens automatically when you assign a value to \navariable.Section 2.1: String Data TypeString are identified as a contiguous set \nof characters represented in the quotation marks. Python allows for eitherpairs \nof single or double quotes. Strings are immutable sequence data type, i.e each \ntime one makes any changesto a string, completely new string object is \ncreated.a_str =\'Hello World\'print(a_str)#output will be whole string. Hello \nWorldprint(a_str[0])#output will be first character. Hprint(a_str[0:5])#output will be \nfirst five characters. HelloSection 2.2: Set Data TypesSets are unordered \ncollections of unique objects, there are two types of set:Sets - They are \nmutable and new elements can be added once sets are defined1.basket \n={\'apple\',\'orange\',\'apple\',\'pear\',\'orange\',\'banana\'}print(basket)# duplicates will be \nremoved>{\'orange\',\'banana\',\'pear\',\'apple\'}a =set(\'abracadabra\')print(a)# unique \nletters in a>{\'a\',\'r\',\'b\',\'c\',\'d\'}a.add(\'z\')print(a)>{\'a\',\'c\',\'r\',\'b\',\'z\',\'d\'}Frozen Sets - They \nare immutable and new elements cannot added after its defined.2.b \n=frozenset(\'asdfagsa\')print(b)>frozenset({\'f\',\'g\',\'d\',\'a\',\'s\'})cities \n=frozenset([\"Frankfurt\",\"Basel\",\"Freiburg\"])print(cities)>frozenset({\'Frankfurt\',\'Basel\',\'Freiburg\'})Section \n2.3: Numbers data typeNumbers have four types in Python. Int, float, complex, \nand long.int_num =10#int valuefloat_num =10.2#float valuecomplex_num = 3.14j \n#complex valuelong_num = 1234567L #long value GoalKicker.com Œ Python® \nNotes for Professionals34Section 2.4: List Data TypeA list contains items \nseparated by commas and enclosed within square brackets [].lists are almost \nsimilar to arraysin C. One difference is that all the items belonging to a list can \nbe of different data type.list=[123,\'abcd\',10.2,\'d\']#can be an array of any data \ntype or single data type.list1 =[\'hello\',\'world\']print(list)#will output whole list. \n[123,\'abcd\',10.2,\'d\']print(list[0:2])#will output first two element of list. \n[123,\'abcd\']print(list1 * 2)#will gave list1 two times. \n[\'hello\',\'world\',\'hello\',\'world\']print(list + list1)#will gave concatenation of both the \nlists.[123,\'abcd\',10.2,\'d\',\'hello\',\'world\']Section 2.5: Dictionary Data TypeDictionary \nconsists of key-value pairs. It is enclosed by curly braces {} and values can be \nassigned and accessedusing square \nbrackets[].dic={\'name\':\'red\',\'age\':10}print(dic)#will output all the key-value pairs. \n{\'name\':\'red\',\'age\':10}print(dic[\'name\'])#will output only value with \'name\' key. \n\'red\'print(dic.values())#will output list of values in dic. \n[\'red\',10]print(dic.keys())#will output list of keys. [\'name\',\'age\']Section 2.6: Tuple \nData TypeLists are enclosed in brackets [ ] and their elements and size can be \nchanged, while tuples are enclosed inparentheses ( ) and cannot be updated. \nTuples are immutable.tuple=(123,\'hello\')tuple1 =(\'world\')print(tuple)#will output \nwhole tuple. (123,\'hello\')print(tuple[0])#will output first value. (123)print(tuple + \ntuple1)#will output (123,\'hello\',\'world\')tuple[1]=\'update\'#this will give you error. \nPYTHON DATA TYPES\nComputing\nWritten by : \nEL BAROUDI Marouane\nData types are nothing but variables you use to reserve some space in \nmemory. Python variables do not need anexplicit declaration to reserve memory \nspace. The declaration happens automatically when you assign a value to \navariable.Section 2.1: String Data TypeString are identified as a contiguous set \nof characters represented in the quotation marks. Python allows for eitherpairs \nof single or double quotes. Strings are immutable sequence data type, i.e each \ntime one makes any changesto a string, completely new string object is \ncreated.a_str =\'Hello World\'print(a_str)#output will be whole string. Hello \nWorldprint(a_str[0])#output will be first character. Hprint(a_str[0:5])#output will be \nfirst five characters. HelloSection 2.2: Set Data TypesSets are unordered \ncollections of unique objects, there are two types of set:Sets - They are \nmutable and new elements can be added once sets are defined1.basket \n={\'apple\',\'orange\',\'apple\',\'pear\',\'orange\',\'banana\'}print(basket)# duplicates will be \nremoved>{\'orange\',\'banana\',\'pear\',\'apple\'}a =set(\'abracadabra\')print(a)# unique \nletters in a>{\'a\',\'r\',\'b\',\'c\',\'d\'}a.add(\'z\')print(a)>{\'a\',\'c\',\'r\',\'b\',\'z\',\'d\'}Frozen Sets - They \nare immutable and new elements cannot added after its defined.2.b \n=frozenset(\'asdfagsa\')print(b)>frozenset({\'f\',\'g\',\'d\',\'a\',\'s\'})cities \n=frozenset([\"Frankfurt\",\"Basel\",\"Freiburg\"])print(cities)>frozenset({\'Frankfurt\',\'Basel\',\'Freiburg\'})Section \n2.3: Numbers data typeNumbers have four types in Python. Int, float, complex, \nand long.int_num =10#int valuefloat_num =10.2#float valuecomplex_num = 3.14j \n#complex valuelong_num = 1234567L #long value GoalKicker.com Œ Python® \nNotes for Professionals34Section 2.4: List Data TypeA list contains items \nseparated by commas and enclosed within square brackets [].lists are almost \nsimilar to arraysin C. One difference is that all the items belonging to a list can \nbe of different data type.list=[123,\'abcd\',10.2,\'d\']#can be an array of any data \ntype or single data type.list1 =[\'hello\',\'world\']print(list)#will output whole list. \n[123,\'abcd\',10.2,\'d\']print(list[0:2])#will output first two element of list. \n[123,\'abcd\']print(list1 * 2)#will gave list1 two times. \n[\'hello\',\'world\',\'hello\',\'world\']print(list + list1)#will gave concatenation of both the \nlists.[123,\'abcd\',10.2,\'d\',\'hello\',\'world\']Section 2.5: Dictionary Data TypeDictionary \nconsists of key-value pairs. It is enclosed by curly braces {} and values can be \nassigned and accessedusing square \nbrackets[].dic={\'name\':\'red\',\'age\':10}print(dic)#will output all the key-value pairs. \n{\'name\':\'red\',\'age\':10}print(dic[\'name\'])#will output only value with \'name\' key. \n\'red\'print(dic.values())#will output list of values in dic. \n[\'red\',10]print(dic.keys())#will output list of keys. [\'name\',\'age\']Section 2.6: Tuple \nData TypeLists are enclosed in brackets [ ] and their elements and size can be \nchanged, while tuples are enclosed inparentheses ( ) and cannot be updated. \nTuples are immutable.tuple=(123,\'hello\')tuple1 =(\'world\')print(tuple)#will output \nwhole tuple. (123,\'hello\')print(tuple[0])#will output first value. (123)print(tuple + \ntuple1)#will output (123,\'hello\',\'world\')tuple[1]=\'update\'#this will give you error. \nINDENTATION\nComputing\nWritten by : \nEL BAROUDI Marouane\nFor Python, Guido van Rossum based the grouping of statements on \nindentation. The reasons for this are explainedin the first section of the \"Design \nand History Python FAQ\". Colons, :, are used to declare an indented code \nblock,such as the following example:class ExampleClass:#Every function \nbelonging to a class must be indented equallydef__init__(self): name \n=\"example\"def someFunction(self, a):#Notice everything belonging to a function \nmust be indentedif a >5:returnTrueelse:returnFalse#If a function is not indented \nto the same level it will not be considers as part of the parent classdef \nseparateFunction(b):for i in b:#Loops are also indented and nested conditions \nstart a new indentationif i \n==1:returnTruereturnFalseseparateFunction([2,3,5,6,1])Spaces or Tabs?The \nrecommended indentation is 4 spaces but tabs or spaces can be used so long \nas they are consistent. Do notmix tabs and spaces in Python as this will cause \nan error in Python 3 and can causes errors in Python 2.Section 3.2: How \nIndentation is ParsedWhitespace is handled by the lexical analyzer before being \nparsed.The lexical analyzer uses a stack to store indentation levels. At the \nbeginning, the stack contains just the value 0,which is the leftmost position. \nWhenever a nested block begins, the new indentation level is pushed on the \nstack,and an \"INDENT\" token is inserted into the token stream which is passed \nto the parser. There can never be morethan one \"INDENT\" token in a row \n(IndentationError).When a line is encountered with a smaller indentation level, \nvalues are popped from the stack until a value is on topwhich is equal to the \nnew indentation level (if none is found, a syntax error occurs). For each value \npopped, a\"DEDENT\" token is generated. Obviously, there can be multiple \n\"DEDENT\" tokens in a row.The lexical analyzer skips empty lines (those \ncontaining only whitespace and possibly comments), and will nevergenerate \neither \"INDENT\" or \"DEDENT\" tokens for them.At the end of the source code, \n\"DEDENT\" tokens are generated for each indentation level left on the stack, \nuntil justthe 0 is left. \nINDENTATION\nComputing\nWritten by : \nEL BAROUDI Marouane\nFor Python, Guido van Rossum based the grouping of statements on \nindentation. The reasons for this are explainedin the first section of the \"Design \nand History Python FAQ\". Colons, :, are used to declare an indented code \nblock,such as the following example:class ExampleClass:#Every function \nbelonging to a class must be indented equallydef__init__(self): name \n=\"example\"def someFunction(self, a):#Notice everything belonging to a function \nmust be indentedif a >5:returnTrueelse:returnFalse#If a function is not indented \nto the same level it will not be considers as part of the parent classdef \nseparateFunction(b):for i in b:#Loops are also indented and nested conditions \nstart a new indentationif i \n==1:returnTruereturnFalseseparateFunction([2,3,5,6,1])Spaces or Tabs?The \nrecommended indentation is 4 spaces but tabs or spaces can be used so long \nas they are consistent. Do notmix tabs and spaces in Python as this will cause \nan error in Python 3 and can causes errors in Python 2.Section 3.2: How \nIndentation is ParsedWhitespace is handled by the lexical analyzer before being \nparsed.The lexical analyzer uses a stack to store indentation levels. At the \nbeginning, the stack contains just the value 0,which is the leftmost position. \nWhenever a nested block begins, the new indentation level is pushed on the \nstack,and an \"INDENT\" token is inserted into the token stream which is passed \nto the parser. There can never be morethan one \"INDENT\" token in a row \n(IndentationError).When a line is encountered with a smaller indentation level, \nvalues are popped from the stack until a value is on topwhich is equal to the \nnew indentation level (if none is found, a syntax error occurs). For each value \npopped, a\"DEDENT\" token is generated. Obviously, there can be multiple \n\"DEDENT\" tokens in a row.The lexical analyzer skips empty lines (those \ncontaining only whitespace and possibly comments), and will nevergenerate \neither \"INDENT\" or \"DEDENT\" tokens for them.At the end of the source code, \n\"DEDENT\" tokens are generated for each indentation level left on the stack, \nuntil justthe 0 is left. \nCOMMENTS AND DOCUMENTATION\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 4.1: Single line, inline and multiline commentsComments are used to \nexplain code when the basic code itself isn\'t clear.Python ignores comments, \nand so will not execute code in there, or raise syntax errors for plain English \nsentences.Single-line comments begin with the hash character (#) and are \nterminated by the end of line.Single line comment:# This is a single line \ncomment in PythonInline comment:print(\"Hello World\")# This line prints \"Hello \nWorld\"Comments spanning multiple lines have \"\"\" or \'\'\' on either end. This is \nthe same as a multiline string, butthey can be used as comments:\"\"\"This type \nof comment spans multiple lines.These are mostly used for documentation of \nfunctions, classes and modules.\"\"\"Section 4.2: Programmatically accessing \ndocstringsDocstrings are - unlike regular comments - stored as an attribute of \nthe function they document, meaning that youcan access them \nprogrammatically.An example functiondef func():\"\"\"This is a function that does \nnothing at all\"\"\"returnThe docstring can be accessed using the __doc__ \nattribute:print(func.__doc__)This is a function that does nothing at \nallhelp(func)Help on function func in module __main__:func()This is a function \nthat does nothing at allAnother example function GoalKicker.com Œ Python® \nNotes for Professionals38function.__doc__ is just the actual docstring as a \nstring, while the help function provides general informationabout a function, \nincluding the docstring. Here\'s a more helpful example:def greet(name, \ngreeting=\"Hello\"):\"\"\"Print a greeting to the user `name` Optional parameter \n`greeting` can change what they\'re greeted with.\"\"\"print(\"{} {}\".format(greeting, \nname))help(greet)Help on function greet in module __main__:greet(name, \ngreeting=\'Hello\')Print a greeting to the user nameOptional parameter greeting \ncan change what they\'re greeted with.Advantages of docstrings over regular \ncommentsJust putting no docstring or a regular comment in a function makes it \na lot less helpful.def greet(name, greeting=\"Hello\"):# Print a greeting to the user \n`name`# Optional parameter `greeting` can change what they\'re greeted \nwith.print(\"{} {}\".format(greeting, name))print(greet.__doc__)Nonehelp(greet)Help \non function greet in module main:greet(name, greeting=\'Hello\')Section 4.3: Write \ndocumentation using docstringsA docstring is a multi-line comment used to \ndocument modules, classes, functions and methods. It has to be thefirst \nstatement of the component it describes.def hello(name):\"\"\"Greet someone. \nPrint a greeting (\"Hello\") for the person with the given name. \"\"\"print(\"Hello \n\"+name)class Greeter:\"\"\"An object used to greet people. \nCOMMENTS AND DOCUMENTATION\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 4.1: Single line, inline and multiline commentsComments are used to \nexplain code when the basic code itself isn\'t clear.Python ignores comments, \nand so will not execute code in there, or raise syntax errors for plain English \nsentences.Single-line comments begin with the hash character (#) and are \nterminated by the end of line.Single line comment:# This is a single line \ncomment in PythonInline comment:print(\"Hello World\")# This line prints \"Hello \nWorld\"Comments spanning multiple lines have \"\"\" or \'\'\' on either end. This is \nthe same as a multiline string, butthey can be used as comments:\"\"\"This type \nof comment spans multiple lines.These are mostly used for documentation of \nfunctions, classes and modules.\"\"\"Section 4.2: Programmatically accessing \ndocstringsDocstrings are - unlike regular comments - stored as an attribute of \nthe function they document, meaning that youcan access them \nprogrammatically.An example functiondef func():\"\"\"This is a function that does \nnothing at all\"\"\"returnThe docstring can be accessed using the __doc__ \nattribute:print(func.__doc__)This is a function that does nothing at \nallhelp(func)Help on function func in module __main__:func()This is a function \nthat does nothing at allAnother example function GoalKicker.com Œ Python® \nNotes for Professionals38function.__doc__ is just the actual docstring as a \nstring, while the help function provides general informationabout a function, \nincluding the docstring. Here\'s a more helpful example:def greet(name, \ngreeting=\"Hello\"):\"\"\"Print a greeting to the user `name` Optional parameter \n`greeting` can change what they\'re greeted with.\"\"\"print(\"{} {}\".format(greeting, \nname))help(greet)Help on function greet in module __main__:greet(name, \ngreeting=\'Hello\')Print a greeting to the user nameOptional parameter greeting \ncan change what they\'re greeted with.Advantages of docstrings over regular \ncommentsJust putting no docstring or a regular comment in a function makes it \na lot less helpful.def greet(name, greeting=\"Hello\"):# Print a greeting to the user \n`name`# Optional parameter `greeting` can change what they\'re greeted \nwith.print(\"{} {}\".format(greeting, name))print(greet.__doc__)Nonehelp(greet)Help \non function greet in module main:greet(name, greeting=\'Hello\')Section 4.3: Write \ndocumentation using docstringsA docstring is a multi-line comment used to \ndocument modules, classes, functions and methods. It has to be thefirst \nstatement of the component it describes.def hello(name):\"\"\"Greet someone. \nPrint a greeting (\"Hello\") for the person with the given name. \"\"\"print(\"Hello \n\"+name)class Greeter:\"\"\"An object used to greet people. \nPYTHON ANTI-PATTERNS\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 199.1: Overzealous except clauseExceptions are powerful, but a single \noverzealous except clause can take it all away in a single line.try: res = \nget_result() res = res[0] log(\'got result: %r\' % res) except: if not res: res = \'\' \nprint(\'got exception\')This example demonstrates 3 symptoms of the \nantipattern:The except with no exception type (line 5) will catch even healthy \nexceptions, including KeyboardInterrupt.1.That will prevent the program from \nexiting in some cases.The except block does not reraise the error, meaning \nthat we won\'t be able to tell if the exception came from2.within get_result or \nbecause res was an empty list.Worst of all, if we were worried about result \nbeing empty, we\'ve caused something much worse. If3.get_result fails, res will \nstay completely unset, and the reference to res in the except block, will \nraiseNameError, completely masking the original error.Always think about the \ntype of exception you\'re trying to handle. Give the exceptions page a read and \nget a feel forwhat basic exceptions exist.Here is a fixed version of the example \nabove:import traceback try: res = get_result() except Exception: \nlog_exception(traceback.format_exc()) raise try: res = res[0]except IndexError: \nres = \'\' log(\'got result: %r\' % res)We catch more specific exceptions, reraising \nwhere necessary. A few more lines, but infinitely more correct.Section 199.2: \nLooking before you leap with processor-intensive functionA program can easily \nwaste time by calling a processor-intensive function multiple times.For example, \ntake a function which looks like this: it returns an integer if the input value can \nproduce one, elseNone:def intensive_f(value): # int -> Optional[int]# complex, \nand time-consuming codeif process_has_failed:returnNonereturn \ninteger_outputAnd it could be used in the following way:x =5if \nintensive_f(x)isnotNone:print(intensive_f(x) / 2)else:print(x,\"could not be \nprocessed\")print(x)Whilst this will work, it has the problem of calling intensive_f, \nwhich doubles the length of time for the code torun. A better solution would be \nto get the return value of the function beforehand \nPYTHON ANTI-PATTERNS\nComputing\nWritten by : \nEL BAROUDI Marouane\nSection 199.1: Overzealous except clauseExceptions are powerful, but a single \noverzealous except clause can take it all away in a single line.try: res = \nget_result() res = res[0] log(\'got result: %r\' % res) except: if not res: res = \'\' \nprint(\'got exception\')This example demonstrates 3 symptoms of the \nantipattern:The except with no exception type (line 5) will catch even healthy \nexceptions, including KeyboardInterrupt.1.That will prevent the program from \nexiting in some cases.The except block does not reraise the error, meaning \nthat we won\'t be able to tell if the exception came from2.within get_result or \nbecause res was an empty list.Worst of all, if we were worried about result \nbeing empty, we\'ve caused something much worse. If3.get_result fails, res will \nstay completely unset, and the reference to res in the except block, will \nraiseNameError, completely masking the original error.Always think about the \ntype of exception you\'re trying to handle. Give the exceptions page a read and \nget a feel forwhat basic exceptions exist.Here is a fixed version of the example \nabove:import traceback try: res = get_result() except Exception: \nlog_exception(traceback.format_exc()) raise try: res = res[0]except IndexError: \nres = \'\' log(\'got result: %r\' % res)We catch more specific exceptions, reraising \nwhere necessary. A few more lines, but infinitely more correct.Section 199.2: \nLooking before you leap with processor-intensive functionA program can easily \nwaste time by calling a processor-intensive function multiple times.For example, \ntake a function which looks like this: it returns an integer if the input value can \nproduce one, elseNone:def intensive_f(value): # int -> Optional[int]# complex, \nand time-consuming codeif process_has_failed:returnNonereturn \ninteger_outputAnd it could be used in the following way:x =5if \nintensive_f(x)isnotNone:print(intensive_f(x) / 2)else:print(x,\"could not be \nprocessed\")print(x)Whilst this will work, it has the problem of calling intensive_f, \nwhich doubles the length of time for the code torun. A better solution would be \nto get the return value of the function beforehand \n', '2020-03-31 00:35:24', '2020-03-31 00:30:40', ' \n', 'TABLE OF CONTENTS\n1\nGetting started with PythonLanguage\n2\nGetting started with PythonLanguage\n3\nPython Data Types\n4\nPython Data Types\n5\nIndentation\n6\nIndentation\n7\nComments and Documentation\n8\nComments and Documentation\n9\nPython Anti-Patterns\n10\nPython Anti-Patterns\n', '0000-00-00 00:00:00');
INSERT INTO `volume` (`volume_id`, `volume_contenu`, `date_from`, `date_to`, `background`, `summary`, `created_at`) VALUES
(3, 'TEST\nComputing\nWritten by : \nEL BAROUDI Marouane\ntesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest \nTABLE OF CONTENTS\n1\ntest\n2\nLes bases de la programmation en C\n3\nPRESENTATION DU C++\n4\nGuide de MySQL\n5\nTHÉORIE DE LA RELATIVITÉ\n6\nHISTORIQUE DU LANGAGE PHP\nTEST\nComputing\nWritten by : \nEL BAROUDI Marouane\ntesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest \nLES BASES DE LA \nPROGRAMMATION EN C\nComputing\nWritten by : \nELBR\nLe C a été conçu en 1972 par Dennis Richie et Ken Thompson, chercheurs \naux Bell Labs, afin de développer un système d\'exploitation UNIX sur un DEC \nPDP-11. En 1978, Brian Kernighan et Dennis Richie publient la définition \nclassique du C dans le livre The C Programming language [6]. Le C devenant \nde plus en plus populaire dans les années 80, plusieurs groupes mirent sur le \nmarché des compilateurs comportant des extensions particulières. En 1983, \nl\'ANSI (American National Standards Institute) décida de normaliser le langage \n; ce travail s\'acheva en 1989 par la définition de la norme ANSI C. Celle-ci fut \nreprise telle quelle par l\'ISO (International Standards Organization) en 1990. \nC\'est ce standard, ANSI C, qui est décrit dans le présent document. Le mot-\nclef chardésigne un objet de type caractère. Un char peut contenir n\'importe \nquel élément du jeu de caractères de la machine utilisée. La plupart du temps, \nun objet de type char est codé sur un octet ; c\'est l\'objet le plus élémentaire en \nC. Le jeu de caractères utilisé correspond généralement au codage ASCII (sur \n7 bits). La plupart des machines utilisent désormais le jeu de caractères ISO-\n8859 (sur 8 bits), dont les 128 premiers caractères correspondent aux \ncaractères ASCII. Les 128 derniers caractères (codés sur 8 bits) sont utilisés \npour les caractères propres aux différentes langues. La version ISO-8859-1 \n(aussi appelée ISO-LATIN-1) est utilisée pour les langues d\'Europe occidentale. \nAinsi, le caractère de code 232 est le è, le caractère 233 correspond au \né...Pour plus de détails sur l\'historique du codage des caractères pour les \ndifférentes langues ainsi que sur la norme UNICODE (sur 16 bits, qui permet \nde coder les caractères pour toutes les langues) et sur la norme ISO/IEC-\n10646 (sur 32 bits, ce qui permet d\'ajouter les caractères anciens), consulter \nl\'article de J. André et M. Goossens [1]. Une des particularités du type char en \nC est qu\'il peut être assimilé à un entier : tout objet de type char peut être \nutilisé dans une expression qui utilise des objets de type entier. Par exemple, \nsi c est de type char, l\'expression c + 1 est valide. Elle désigne le caractère \nsuivant dans le code ASCII. La table précédente donne le code ASCII (en \ndécimal, en octal et en hexadécimal) des caractères imprimables. Ainsi, le \nprogramme suivant imprime le caractère \'B\'. \nPRESENTATION DU C++\nComputing\nWritten by : \nELBR\nApparu au d´ebut des ann´ees 90, le langage C++ est actuellement l™un des \nplus utilis´es dans le monde, aussi bien pour les applications scientifiques que \npour le d´eveloppement des logiciels. En tant qu™h´eritier du langage C, le C++ \nest d™une grande efficacit´e. Mais il a en plus des fonctionnalit´es puissantes, \ncomme par exemple la notion de classe, qui permet d™appliquer les techniques \nde la programmation-objet. Le but de ce cours est de pr´esenter la syntaxe de \nbase du langage C++. Certains traits propres au C, dont l™usage s™av`ere \np´erilleux, sont pass´es sous silence. La programmation-objet, quant `a elle, \nsera abord´ee dans un autre cours. ) Programmer un ordinateur, c™est lui \nfournir une s´erie d™instructions qu™il doit ex´ecuter. Ces instructions sont \ng´en´eralement ´ecrites dans un langage dit ´evolu´e, puis, avant d™‹etre \nex´ecut´ees, sont traduites en langage machine (qui est le langage du \nmicroprocesseur). Cette traduction s™appelle compilation et elle est effectu´ee \nautomatiquement par un programme appel´e compilateur. Pour le programmeur, \ncette traduction automatique implique certaines contraintes : Œ il doit ´ecrire les \ninstructions selon une syntaxe rigoureuse, Œ il doit d´eclarer les donn´ees et \nfonctions qu™il va utiliser (ainsi le compilateur pourra r´eserver aux donn´ees \nune zone ad´equate en m´emoire et pourra v´erifier que les fonctions sont \ncorrectement employ´ees). ) Un programme ´ecrit en C++ se compose \ng´en´eralement de plusieurs fichiers-sources. Il y a deux sortes de fichiers-\nsources : Œ ceux qui contiennent effectivement des instructions ; leur nom \nposs`ede l™extension .cpp, Œ ceux qui ne contiennent que des d´eclarations ; \nleur nom poss`ede l™extension .h (signifiantﬁheaderﬂ ou en-t‹ete). Un fichier .h \nsert `a regrouper des d´eclarations qui sont communes `a plusieurs fichiers \n.cpp, et permet une compilation correcte de ceux-ci. Pour ce faire, dans un \nfichier .cpp on pr´evoit l™inclusion automatique des fichiers .h qui lui sont \nn´ecessaires, gr‹ace aux directives de compilation #include. En supposant que \nle fichier `a inclure s™appelle untel.h, on ´ecrira #include \n s™il s™agit d™un fichier \nde la biblioth`eque standard du C++, ou #include \"untel.h\" s™il s™agit d™un fichier \n´ecrit par nous-m‹emes \nGUIDE DE MYSQL\nComputing\nWritten by : \nELBR\nMySQL est la base de données open source la plus populaire au monde. Bien \nqu\'elle soit avant tout connue pour son utilisation par des sociétés Web, telles \nque Google, Facebook et Yahoo!, MySQL est également une base de données \nembarquée très populaire. Plus de 3000 éditeurs de logiciels et fabricants de \nmatériel lui font confiance, parmi lesquels sept des dix plus grandes entreprises \nlogicielles au monde. Ce livre blanc examine en premier lieu les bases de \ndonnées embarquées en général - leur nature, le marché des bases de \ndonnées embarquées, et les avantages d™embarquer une base de données par \nrapport à supporter celles de vos clients ou développer votre propre base de \ndonnées embarquée. Nous commencerons par aborder l\'impact de l\'utilisation \nde MySQL en tant que base de données embarquée sur les trois facteurs \nfondamentaux de la réussite commerciale - à savoir les coûts, le chiffre \nd\'affaires et les risques - en réduisant le coût des marchandises vendues \n(COGS), augmentant la satisfaction client et réduisant les risques. L\'objectif de \nce livre blanc est de répondre aux questions suivantes: Pourquoi utiliser une \nbase de données embarquée? Et pourquoi utiliser MySQL comme base de \ndonnées embarquée pour mes produits? C\'est une excellente référence, une \ncompilation de faits et d\'informations contenant de nombreux liens vers de plus \namples informations, la plupart du temps techniques, ou concernant nos clients \net leurs expériences avec MySQL. \nTHÉORIE DE LA RELATIVITÉ\nPhysics\nWritten by : \nELBR\nAlbert Einstein propose, en 1905, la théorie de la relativité restreinte comme un \nnouveau cadre pour décrire de façon cohérente les phénomènes physiques \nmettant en jeu des vitesses proches de celle de la lumière. En imposant \nl\'universalité de la vitesse de la lumière, la relativité restreinte mène à une \ndescription profondément modifiée de toute la physique, dont la toile de fond \ndevient un espace-temps quadridimensionnel. Des concepts aussi importants \nque la simultanéité de deux événements ou la longueur d\'un objet deviennent \nrelatifs aux référentiels dans lesquels on les observe. La masse (m) d\'un corps \nest comprise comme son énergie (E) au repos (E = mc2), c étant la vitesse de \nla lumière. Les nombreuses conséquences expérimentales de la relativité \nrestreinte ont été maintes fois confirmées. En 1915, Einstein généralise le \nprincipe de relativité et en déduit une nouvelle théorie de la gravitation fondée \nsur la notion d\'espace-temps courbe. \nHISTORIQUE DU LANGAGE PHP\nComputing\nWritten by : \nELBR\nL\'origine de PHP remonte à 1995 quand Rasmus Lerdorf a créé PHP/FI, une \nlibrairie de scripts Perl utilisés pour la publication de son CV sur son site \npersonnel. Au fur et à mesure des évolutions, la librairie a été portée en C et \nagrémentée de nouvelles fonctionnalités pour créer des pages dynamiques \nsimples pour le web et accéder à quelques sources de données. PHP/FI \nsignifie Personal Home Page/Forms Interpreter. PHP/FI 2.0 sort en 1997, \ntoujours développé par une seule personne. C\'est le succès : 50000 sites (1% \ndes noms de domaines) disent l\'utiliser ou le supporter. Les contributeurs \naffluent. PHP 3.0 sort en juin 1998, c\'est la première version développée \nconjointement par Rasmus Lerdorf, Andi Gutmans et Zeev Suraski et \nentièrement réécrite (les versions précédentes étaient trop lentes pour une \napplication commerciale). Outre les performances, PHP 3 est modulaire et \nextensible, permettant de lui greffer des API supplémentaires, ce qui n\'a pas \nmanqué avec le support de nombreuses bases de données, de formats et de \nprotocoles, une syntaxe plus cohérente et un support basique de l\'objet. Il a \nété installé sur 10% du parc mondial des serveurs web avec des dizaines de \nmilliers de développeurs et des centaines de milliers de sites. Le moteur de \nPHP 4 a été repensé afin d\'en améliorer les performances pour des \napplications complexes et d\'augmenter encore la modularité. Un nouveau \nmoteur a vu le jour, appelé Zend Engine (contraction de Zeev et Andi). PHP 4 \nsort officiellement en mai 2000 et apporte des performances accrues, le \nsupports de plusieurs serveurs web, les sessions, une sécurité accrue. C\'est \nactuellement la dernière version stable (nous ne comptons pas les 4.1, 4.2 et \n4.3). Et PHP 5 ? Actuellement en version beta, un cycle qui peut durer \nplusieurs mois, le but de PHP 5 est une amélioration des performances du \nmoteur Zend (Zend Engine 2), un modèle objet étendu et très proche du C++, \nune compatibilité accrue avec de nouveaux standards et les anciens (RPC, \nXML, .NET, ...) \n', '2020-04-16 21:44:13', '2020-04-16 21:41:05', ' \n \n[Année]\n \nMarouane EL BAROUDI\n \n[Nom de la société]\n \n[Date]\n \n[Titre du document]\n \n', 'TABLE OF CONTENTS\n1\ntest\n2\nLes bases de la programmation en C\n3\nPRESENTATION DU C++\n4\nGuide de MySQL\n5\nTHÉORIE DE LA RELATIVITÉ\n6\nHISTORIQUE DU LANGAGE PHP\n', '0000-00-00 00:00:00'),
(4, 'TESTTTTT\nComputing\nWritten by : \nEL BAROUDI Marouane\nCORRECTION DE L\'ARTICLE : TESTTTTT \nTABLE OF CONTENTS\n1\ntesttttt\n2\ntestV3\n3\nDéveloppement de logiciel\nTESTTTTT\nComputing\nWritten by : \nEL BAROUDI Marouane\nCORRECTION DE L\'ARTICLE : TESTTTTT \nTESTV3\nMathematics\nWritten by : \nEL BAROUDI Marouane\nTESTT \nDÉVELOPPEMENT DE LOGICIEL\nComputing\nWritten by : \nELBR\nLe développement de logiciel consiste à étudier, concevoir, construire, \ntransformer, mettre au point, maintenir et améliorer des logiciels. Ce travail est \neffectué par les employés d\'éditeurs de logiciels, de sociétés de services et \nd\'ingénierie informatique (SSII), des travailleurs indépendants (freelance) et des \nmembres de la communauté du logiciel libre. Un logiciel est créé petit à petit \npar une équipe d\'ingénieurs conformément à un cahier des charges établi par \nun client demandeur ou une équipe interne. Le logiciel est décomposé en \ndifférents modules et un chef de projet, ou architecte, se charge de la \ncohérence de l\'ensemble. Différentes activités permettent de prendre \nconnaissance des attentes de l\'usager, créer un modèle théorique du logiciel, \nqui servira de plan de construction, puis construire le logiciel, contrôler son bon \nfonctionnement et son adéquation au besoin. La planification et la répartition \ndes travaux permet d\'anticiper le délai et le coût de fabrication. Le logiciel est \naccompagné d\'une procédure d\'installation, d\'une procédure de vérification de \nbonne installation, de documentation (parfois créé automatiquement à partir de \ncommentaires placés à cet effet dans le code source) et d\'une équipe \nd\'assistance au déploiement et à la maintenance, désignée sous le nom de \nsupport. Outre les travaux d\'analyse, de conception, de construction et de tests, \nune procédure de recette - simulacre d\'acquisition, permettra de déterminer si \nle logiciel peut être considéré comme utilisable \n', '2020-04-16 22:05:36', '2020-04-16 22:04:32', '[Titre du \ndocument]\n \n \n \n \n \n \n[Nom de la société]\n \n[Adresse de la société]\n \n[N° de téléphone]\n ', 'TABLE OF CONTENTS\n1\ntesttttt\n2\ntestV3\n3\nDéveloppement de logiciel\n', '0000-00-00 00:00:00');

--
-- Index pour les tables déchargées
--

--
-- Index pour la table `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`article_id`),
  ADD KEY `author_id` (`author_id`);

--
-- Index pour la table `articleaccepted`
--
ALTER TABLE `articleaccepted`
  ADD PRIMARY KEY (`accepted_id`),
  ADD KEY `article_accepted_id` (`article_accepted_id`),
  ADD KEY `reviewer_id` (`reviewer_id`);

--
-- Index pour la table `articlereviewed`
--
ALTER TABLE `articlereviewed`
  ADD PRIMARY KEY (`reviewed_id`),
  ADD KEY `article_reviewed_id` (`article_reviewed_id`),
  ADD KEY `reviewer_id` (`reviewer_id`);

--
-- Index pour la table `articletocorrect`
--
ALTER TABLE `articletocorrect`
  ADD PRIMARY KEY (`tocorrect_id`),
  ADD KEY `article_tocorrect_id` (`article_tocorrect_id`),
  ADD KEY `reviewer_id` (`reviewer_id`);

--
-- Index pour la table `articletoreview`
--
ALTER TABLE `articletoreview`
  ADD PRIMARY KEY (`toreview_id`),
  ADD KEY `reviewer_id` (`reviewer_id`),
  ADD KEY `article_toreview_id` (`article_toreview_id`);

--
-- Index pour la table `author`
--
ALTER TABLE `author`
  ADD PRIMARY KEY (`author_id`);

--
-- Index pour la table `editor`
--
ALTER TABLE `editor`
  ADD PRIMARY KEY (`editor_id`);

--
-- Index pour la table `newsletter`
--
ALTER TABLE `newsletter`
  ADD PRIMARY KEY (`ID`),
  ADD UNIQUE KEY `email` (`email`);

--
-- Index pour la table `reviewer`
--
ALTER TABLE `reviewer`
  ADD PRIMARY KEY (`reviewer_id`);

--
-- Index pour la table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`user_id`);

--
-- Index pour la table `volume`
--
ALTER TABLE `volume`
  ADD PRIMARY KEY (`volume_id`);

--
-- AUTO_INCREMENT pour les tables déchargées
--

--
-- AUTO_INCREMENT pour la table `article`
--
ALTER TABLE `article`
  MODIFY `article_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=80;

--
-- AUTO_INCREMENT pour la table `articleaccepted`
--
ALTER TABLE `articleaccepted`
  MODIFY `accepted_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=66;

--
-- AUTO_INCREMENT pour la table `articlereviewed`
--
ALTER TABLE `articlereviewed`
  MODIFY `reviewed_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=28;

--
-- AUTO_INCREMENT pour la table `articletocorrect`
--
ALTER TABLE `articletocorrect`
  MODIFY `tocorrect_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT pour la table `articletoreview`
--
ALTER TABLE `articletoreview`
  MODIFY `toreview_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;

--
-- AUTO_INCREMENT pour la table `newsletter`
--
ALTER TABLE `newsletter`
  MODIFY `ID` int(10) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT pour la table `user`
--
ALTER TABLE `user`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=50;

--
-- AUTO_INCREMENT pour la table `volume`
--
ALTER TABLE `volume`
  MODIFY `volume_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- Contraintes pour les tables déchargées
--

--
-- Contraintes pour la table `article`
--
ALTER TABLE `article`
  ADD CONSTRAINT `article_ibfk_1` FOREIGN KEY (`author_id`) REFERENCES `author` (`author_id`);

--
-- Contraintes pour la table `articleaccepted`
--
ALTER TABLE `articleaccepted`
  ADD CONSTRAINT `articleaccepted_ibfk_1` FOREIGN KEY (`article_accepted_id`) REFERENCES `article` (`article_id`),
  ADD CONSTRAINT `articleaccepted_ibfk_2` FOREIGN KEY (`reviewer_id`) REFERENCES `reviewer` (`reviewer_id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
